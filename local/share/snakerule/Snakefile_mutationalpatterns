include: "conf.sk"

rule chain:
    output: "chain.gz"
    shell: "wget -O {output} http://hgdownload.cse.ucsc.edu/goldenpath/hg19/liftOver/hg19ToHg38.over.chain.gz"


wildcard_constraints:
    which="[\w\d_.]+"   

rule bed:
    input: bed=BED+"/{which}.bed", chain="chain.gz"
    output: bed="{which}.bed", miss="{which}.miss"
    shell:
        """
            liftOver <(bawk '{{print "chr"$1,$2,$3}}' {input.bed}) {input.chain} {output.bed} {output.miss}
        """

#from os import glob
#rule replibed:
#    input: glob.glob("all_RepliSeq*.bed")

def getbedname(wildcards):
    if wildcards.which == "Homo_sapiens.GRCh37.75_autosomal_exon_merged_sorted":
        return("exons")
    else:
        return(wildcards.which)


# warning this is an "unsafe" rule that determines the cnv file to be opened based on vcf filenames
# and thus violates the chain of input/output by snakemake
# Warnings are not an issue, different chr names from beds  (TODOPARANOIA check)
rule bed_enrich:
    input: bed="{which}.bed", callable=CALLABLE
    output: tsv="{which}.enrich.tsv", plot="{which}.enrich.pdf"
    params: tool=BIN_DIR+"/mutpat_enrich_cnv", input= lambda wildcards, input: ','.join(find_pairs_vcf(wildcards)), cnvdir=VCF_DIR, name=getbedname
    shell:  
        """
            {params.tool} {params.input} {input.bed} {params.name} {input.callable} {params.cnvdir} {output.plot} {output.tsv}
        """
####
def wanted_pairs():
    l1 = expand("{t1sample}_"+CLONE2[0], t1sample=CLONE2[1:]) 
    l2 = expand("{t1sample}_"+CLONE8[0], t1sample=CLONE8[1:])
    l3 = expand("{t1sample}_"+CLONE9[0], t1sample=CLONE9[1:])
    return l1 + l2 + l3

def find_pairs_vcf(wildcards):
    return [VCF_DIR+"/"+x+".gain.vcf.gz" for x in wanted_pairs()]
    
rule mut_pat_signatures:
    input: find_pairs_vcf
    output: directory("mut_pat_signatures_{nrank}")
    params: tool=BIN_DIR+"/mut_pat_sign", input= lambda wildcards, input: ','.join(input)#, nsign=NSIGN
    shell:
        """
            mkdir -p {output}
            {params.tool} {params.input} {output} {wildcards.nrank}
        """


STARTTIME="-0" # this is overwritten in conf.sk for 2nd round clones
def find_pairs_raw_ov_stupid(wildcards): 
    # We use info from conf.sk instead of patching info together from SAMPLES and STARTTIME
    # still not clear which is best, this is more flexible but the other solution is safer (if correct :))
    branch = SAMPLES_TREE[wildcards.bsample]
    start = branch.pop(0)
    r1 = re.compile(r'-M')
    els_topi = filter(r1.search, branch) 
    els_notopi = filter(lambda x: not r1.search(x), branch)
    return [ c+'_'+start+'.MR_ov.tsv' for c in els_notopi] + [ c+'_'+start+'.MR_ovtopi.tsv' for x in els_topi]


# "-0" becomes STARTTIME
def find_pairs_raw_ov(wildcards):
    print(wildcards.bsample)
    # if per distinguere topi da non topi _ov or _ovTOPI
    get_indexes = lambda x, xs: [i for (y, i) in zip(xs, range(len(xs))) if re.match(x, y)]
    regex = r"^" + re.escape(wildcards.bsample) #+ r"-"
    idxs = get_indexes(regex, SAMPLES)
    els = [SAMPLES[i] for i in idxs]
    print("els:")
    print(els)
    t0 = None
    if STARTTIME != "-0":
        # here we need a new logic to find the right startime clone
        #regex = r"^" + re.escape(wildcards.bsample) + STARTTIME
        start = SAMPLES_ORIG_T1[wildcards.bsample] # exception gets swallowed for all since there is another rule to make it but for completeness we add a wildcard contstraint on bsample
        print(start)
        idxs = get_indexes(start, els)
        print(idxs)
        if len(idxs) != 1:
            print("Something bad!")
            return "plh"
        else:
            print("time start " + els[idxs[0]])
            t0  = els.pop(idxs[0]) # we remove our starting clone
            # then need to keep only the T2 ones
            t2_r = re.compile(TIME) # do we need to get it more precise for 
            els = list(filter(t2_r.search, els))
    else:
        els.remove(wildcards.bsample+STARTTIME)
    print("then:")
    print([x for x in els])
    r1 = re.compile(r'-M')
    els_topi = filter(r1.search, els) 
    els_notopi = filter(lambda x: not r1.search(x), els) 
    if STARTTIME == "-0":
        return [ x+'_'+wildcards.bsample+STARTTIME+'.MR_ov.tsv' for x in els_notopi] + [ x+'_'+wildcards.bsample+STARTTIME+'.MR_ovtopi.tsv' for x in els_topi]
    else:
        y = [ x+'_'+t0+'.MR_ov.tsv' for x in els_notopi] + [ x+'_'+t0+'.MR_ovtopi.tsv' for x in els_topi]
        print(y)
        #return [ x+'_'+t0+'.MR_ov.tsv' for x in els_notopi] + [ x+'_'+t0+'.MR_ovtopi.tsv' for x in els_topi]
        return 

FUN_OV=find_pairs_raw_ov
include: "conf.sk"

def getbedname(wildcards):
    if wildcards.which == "Homo_sapiens.GRCh37.75_autosomal_exon_merged_sorted":
        return("exons")
    else:
        return(wildcards.which)


# warning this is an "unsafe" rule that determines the cnv file to be opened based on vcf filenames
# and thus violates the chain of input/output by snakemake
# Warnings are not an issue, different chr names from beds  (TODOPARANOIA check)
rule bed_enrich:
    input: bed="../../{which}.bed", callable=CALLABLE
    output: tsv="{which}.enrich.tsv", plot="{which}.enrich.pdf"
    params: tool=BIN_DIR+"/mutpat_enrich_cnv", input= lambda wildcards, input: ','.join(find_pairs_vcf(wildcards)), cnvdir=VCF_DIR, name=getbedname
    shell:  
        """
            {params.tool} {params.input} {input.bed} {params.name} {input.callable} {params.cnvdir} {output.plot} {output.tsv}
        """
####
def wanted_pairs():
    res = []
    for cl in CLONES:
        res = res + expand("{t1sample}_"+cl[0], t1sample=cl[1:]) 
    return res

def find_pairs_vcf(wildcards):
    return [VCF_DIR+"/"+x+".gain.vcf.gz" for x in wanted_pairs()]
    
rule mut_pat_signatures:
    input: find_pairs_vcf
    output: directory("mut_pat_signatures_{nrank}")
    params: tool=BIN_DIR+"/mut_pat_sign", input= lambda wildcards, input: ','.join(input)#, nsign=NSIGN
    shell:
        """
            mkdir -p {output}
            {params.tool} {params.input} {output} {wildcards.nrank}
        """

rule mut_pat_baseinfo:
    input: find_pairs_vcf
    output: directory("mut_pat")
    params: tool=BIN_DIR+"/mut_pat_baseinfo", input= lambda wildcards, input: ','.join(input)
    shell:
        """
            mkdir -p {output}
            {params.tool} {params.input} {output}
        """

# single model signatures all! TODO
rule all_sign_input:
    input: find_pairs_vcf
    output: "signinput"
    run:
        import re
        with open(output[0],'w') as out:
            for vcf in input:
                crc =  re.search('/(CRC\d{4}[^/]+)\.gain', vcf) # 1599 have LM/PR and we need to keep it
                sample_kind = "NA"
                sample = crc.group(1)
                if re.search('-M', vcf) is not None:
                    sample_kind = 'vivo'
                else:
                    sample_kind = 'vitro'
                annotation = sample + '_' + sample_kind
                out.write("{}\t{}".format(vcf, annotation))
                out.write("\n")

rule all_sign:
    input: "signinput"
    output: heat="heatmap_cosmic.png", cosine="cosine_cosmic.png"
    params: tool=BIN_DIR+"/mut_pat_signatures_fit", colors='#0829fc'
    shell:
        """
            {params.tool} {input} {output.heat} {output.cosine} '{params.colors}'
        """

import os
def find_prj_root(path=os.getcwd()):
    if os.path.isfile(os.path.join(path,".PRJ_ROOT")):
        return path
    else:
        if path:
            return find_prj_root(os.path.dirname(path))
        else:
            raise Exception("Can not find the PRJ_ROOT directory")

PRJ_ROOT=find_prj_root()
DEPTHS = ['10x','20x','30x','40x','50x', '60x', '70x', '80x', '90x', '100x','150x','200x']#,'300x']

rule all_merge:
    input: ['merged_' + x for x in DEPTHS]
    output: "all_bexp_different_coverage.tsv"
    shell: 
        """
            head -n 1 {input[0]} > {output}
            cat {input} | grep -v -w called_in_gen >> {output}
        """

rule merge:
    input: bonf='mutect_nobin_{depth}/bexp_n_gen.bonf.tsv', bh='mutect_nobin_{depth}/bexp_n_gen.bh.tsv', len='mutect_nobin_{depth}/all.lengthgen.txt'
    output: "merged_{depth}"
    run:
        import pandas as pd
        bonf = pd.read_csv(input.bonf, sep="\t", index_col=0)
        bh = pd.read_csv(input.bh, sep="\t", index_col=0)
        covered = pd.read_csv(input.len, sep="\t", index_col=0)
        bonf['correction'] = 'bonf'
        bh['correction'] = 'bh'
        covered['coverage'] = wildcards.depth
        bexp = pd.concat([bonf, bh])
        tot = bexp.join(covered, how='inner')
        tot.to_csv(output[0], sep="\t", header=True)


### meta folies
rule all_subdirs:
    input: expand("mutect_nobin_{coverage}/all.lengthgen.txt", coverage=DEPTHS)

rule dir_and_call:
    input: snake=PRJ_ROOT+"/local/share/snakerule/Snakefile_clones_real_segments", confplh=PRJ_ROOT+"/local/share/snakemake/conf_CRC1502_150x_mutect_polished_PLHx.sk"
    output: alllen="mutect_nobin_{coverage}/all.lengthgen.txt", bexp="mutect_nobin_{coverage}/bexp_n_gen.bh.tsv", conf=PRJ_ROOT+"/local/share/snakemake/conf_CRC1502_150x_mutect_polished_{coverage}.sk"
    shell:
        """
           d=$(dirname {output.alllen})
           mkdir -p $d
           cd $d
           ln -s {input.snake} Snakefile
           cat {input.confplh} | sed 's/PLHx/{wildcards.coverage}/1' > {output.conf}
           ln -s {output.conf} conf.sk
           o1=$(basename {output.alllen})
           o2=$(basename {output.bexp})
           snakemake $o1 $o2
        """

### overlap between pileups and regions with ploidy = 3 ################################
SAMPLES=['CRC1502-03-1-A','CRC1502-03-0']
#PILEUPS_D='/mnt/trcanmed/snaketree/prj/snakegatk/dataset/CRC1502_120x/varscan_paired' # CRC1307-02-1-E.mpileup.gz
PILEUPS_D='/mnt/trcanmed/snaketree/prj/AF_spectra/local/share/data/mpile1502'
#CN_D='./mutect_nobin_10x/' # mutect_nobin_100x/CRC1307-02-1-E.callable.bed.gz # this has depth included and we want to be as generic as possible now
GNOMAD_TASK_DIR='/mnt/trcanmed/snaketree/task/annotations/dataset/gnomad'
CALLABLE_BED=GNOMAD_TASK_DIR+'/wgs_calling_regions.hg38.bed.gz'

import os
def find_prj_root(path=os.getcwd()):
    if os.path.isfile(os.path.join(path,".PRJ_ROOT")):
        return path
    else:
        if path:
            return find_prj_root(os.path.dirname(path))
        else:
            raise Exception("Can not find the PRJ_ROOT directory")

PRJ_ROOT=find_prj_root()
BIOINFO_ROOT = os.getenv('BIOINFO_ROOT')
SNAKE_ROOT=os.getenv('SNAKE_ROOT')
ANNOVAR=SNAKE_ROOT+"/task/variant_annotations/dataset/annovar/hg38/humandb/"

HROOT='/home/egrassi'
DATA=PRJ_ROOT+"/local/share/data/CRC1502_150x"
SDATA=DATA
BIN_DIR=PRJ_ROOT+"/local/bin"
SRC_DIR=PRJ_ROOT+"/local/src"

## we guess sequenza is 1 based cause it starts from pileups...end...included? Looked around in code, sic, going with "assumptions".
rule intersect_cnv:
    input: sequenza=SDATA+"/{sample}_segments.txt", callable=CALLABLE_BED, chrs=DATA+"/chrs"
    output: callable="{sample}.callable.bed.gz"
    shell:
        """
            bedtools intersect -b {input.callable} -a <(sed 1d {input.sequenza} | bawk '{{print $1, $2-1, $3, $10, $11,$12}}') | filter_1col 1 {input.chrs} | gzip > {output.callable}
        """

# we keep also A and B from sequenza to remove LOH regions
rule intersect_mpileup:
    input: callable="{sample}.callable.bed.gz", pileup=PILEUPS_D+'/{sample}.noovrem_mpileup.gz'
    output: "{sample}.callable_ploidy-{p}_noovrem_pseudompileup.gz"
    shell:
        """
            bedtools intersect -b <(zcat {input.callable} | bawk '$4=={wildcards.p}') -a <(zcat {input.pileup} | bawk '{{print $1, $2-1, $2, $3, $4, $5}}') | gzip > {output}
        """

rule all_int_mpileup:
    input: expand("{sample}.callable_ploidy-{p}_pseudompileup.gz", sample=SAMPLES, p=[2,3])

#input: expand("{sample}.callable_ploidy-{p}_pseudompileup.gz", sample=SAMPLES, p=[2,3])

###################### Mobster input

# seg to bed
# why decoy are in callable interval list?? let's start with chr1-22 only, sequenza is on 1-22-X-Y only right now

# vcf intersect on CN=2
rule vcf_cn_2:
    input: callable="{sample}.callable.bed.gz", vcf=DATA+'/{sample}.pass.vcf.gz'
    output: '{sample}_cn{cn}.vcf.gz'
    shell:
        """
            bedtools intersect -header -wa -b <(zcat {input.callable} | bawk '$4=={wildcards.cn} && $6!=0') -a {input.vcf} | bgzip > {output}
        """

rule vcf_cn_2_noloh:
    input: callable="{sample}.callable.bed.gz", vcf=DATA+'/{sample}.pass.vcf.gz'
    output: '{sample}_nolohcn{cn}.vcf.gz'
    shell:
        """
            bedtools intersect -header -wa -b <(zcat {input.callable} | bawk '$4=={wildcards.cn} && $6!=0') -a {input.vcf} | bgzip > {output}
        """

rule vcf_single:
    input: vcf="{sample}_nolohcn{cn}.vcf.gz"
    output: "my_{sample}_nolohcn{cn}.vcf.gz"
    shell:
        """
            bcftools view -s {wildcards.sample} {input.vcf} | bgzip > {output}
        """


PRJ_DIR="/scratch/trcanmed/AF_spectra"
### vcf_cn_2_noloh Marika's 
rule vcf_1502:
    input: callable="../CRC1502/platypus_nobin/CRC1502-03-0.callable.bed.gz", vcf=PRJ_DIR+"/local/share/data/marika/CRC1502LMO0A04010001D02000.pass.vcf.gz"
    output: 'CRC1502_nolohcn{cn}.vcf.gz'
    shell:
        """
            bedtools intersect -header -wa -b <(zcat {input.callable} | bawk '$4=={wildcards.cn} && $6!=0') -a {input.vcf} | bgzip > {output}
        """


rule vcf_1307:
    input: callable="../CRC1307_platypus_nobin/CRC1307-02-0.callable.bed.gz", vcf=PRJ_DIR+"/local/share/data/marika/CRC1307LMO0A02008004D02000.pass.vcf.gz"
    output: 'CRC1307_nolohcn{cn}.vcf.gz'
    shell:
        """
            bedtools intersect -header -wa -b <(zcat {input.callable} | bawk '$4=={wildcards.cn} && $6!=0') -a {input.vcf} | bgzip > {output}
        """

rule vcf_1078:
    input: callable="../CRC1078/platypus_nobin/CRC1078-02-0.callable.bed.gz", vcf=PRJ_DIR+"/local/share/data/marika/CRC1078LMO0A02009002D03000.pass.vcf.gz"
    output: 'CRC1078_nolohcn{cn}.vcf.gz'
    shell:
        """
            bedtools intersect -header -wa -b <(zcat {input.callable} | bawk '$4=={wildcards.cn} && $6!=0') -a {input.vcf} | bgzip > {output}
        """



include: "../platypus_nobin_00/Snakefile"
include: "./conf.sk"

MODEL=SAMPLES[1].split('-')[0]

rule phangorn_bulk:
    input:  bulk=DATA+'/../' + SHIPMENT + '/'+BULKNAME+'.pass.vcf.gz', vcf=DATA+"/platypus_filtered.vcf.gz"
    output: nexus="tree_bulk_{vv}.nexus", pdf="tree_bulk_{vv}.pdf", rimage="tree_bulk_{vv}.Rdata"
    params: model=MODEL, normal=NORMAL, chrs=','.join(['chr'+str(x) for x in list(range(1,23)) + ['X','Y']])
    script: SRC_DIR+"/phangorn2_nothr.R"

try:
    BULKNAME_VCF
except NameError:
    BULKNAME_VCF=BULKNAME

rule bulk_vars:
    input:  vcf=DATA+'/../' + SHIPMENT + '/'+BULKNAME+'.pass.vcf.gz', chrs=DATA+"/chrs"
    output: "bulk.tsv.gz"
    params: tool=VCFTOBED1, multi=MULTI, kind=KIND, sample=BULKNAME_VCF
    log: "bulk.multiallelic"
    shell: 
        """
            bcftools view -s {params.sample} {input.vcf} | bcftools annotate -I +'%CHROM:%POS:%REF:%ALT' - \\
            | grep -v "^#" |  filter_1col 1 {input.chrs} | {params.tool} {params.kind} {params.multi} 2> {log} | gzip > {output}
        """

rule sequenza_bed:
    input: sequenza=DATA+'/../' + SHIPMENT + '/'+BULKNAME+'_segments.txt'
    output: var="bulk.sequenza.bed"
    shell:
        """
            sed 1d {input.sequenza} | bawk '{{print $1, $2-1, $3, $10}}' > {output}
        """

# we guess sequenza is 1 based cause it starts from pileups...end...included? Looked around in code, sic, going with "assumptions".
# we start with CALLABLE == to the clones cause right now we do not have the callable on bulk - not ideal.
rule intersect_cnv_bulk:
    input: var="bulk.tsv.gz", sequenza=DATA+'/../' + SHIPMENT + '/'+BULKNAME+'_segments.txt', callable=CALLABLE, chrs=DATA+"/chrs"
    output: var="bulk.var_cnv.tsv.gz", callable="bulk.callable.bed.gz"
    shell:
        """
            bedtools intersect -b {input.callable} -a <(sed 1d {input.sequenza} | bawk '{{print $1, $2-1, $3, $10}}') | filter_1col 1 {input.chrs} | gzip > {output.callable};
            bedtools intersect -wo -a <(zcat {input.var}) -b {output.callable} | bawk '{{print $1, $2, $3, $4":"$8}}' |  gzip > {output.var}
        """

# 23/05/23 added $6,$7 to have info on variants ref/alt allele and run annovar
rule bulk_bed:
    input: var="bulk.var_cnv.tsv.gz"
    output: var="bulk.bed"
    params: cn=WANTED_CN
    shell:
        """ 
            echo {params.cn} | tr "," "\\n" > {output}.tmp
            zcat {input.var} | tr ":" "\\t" | filter_1col 11 {output}.tmp | bawk '{{print $1,$2,$3,$6"-"$7}}' > {output}
            rm {output}.tmp
        """
                
rule bulk_annovar:
    input: "bulk.bed", ANNOVAR
    output: "bulk.multianno.txt"
    log: "bulk.multianno.log"
    params: ver="hg38"
    shell:
        """
        sed 's/chr//1;' < {input[0]} | tr "-" "\\t" | bawk '{{if($5=="") {{$5="-"}} if ($4==""){{$4="-"}} b=$2+1; e=b+length($4)-1; print $1,b,e,$4,$5,$6}}' > {output}.tmp
        table_annovar.pl {output}.tmp {input[1]} --otherinfo -buildver {params.ver} -out merged -remove -protocol refGene,avsnp150,cosmic87_coding -operation g,f,f -nastring . -polish &> {log}
        rm {output}.tmp
        bawk '{{print "bulk", $0}}' < merged.hg38_multianno.txt > {output}
        rm merged.hg38_multianno.txt
        """

rule bulk_binary_nonsyn:
    input: data="bulk.multianno.txt", wanted=PRJ_ROOT+"/local/share/data/nonsyn"
    output: res="bulk.nonsyn.binary.tsv.gz"
    run:
        import pandas as pd
        d = pd.read_table(input.data, sep='\t', index_col=None, header=None)
        wanted = pd.read_table(input.wanted, sep='\t', index_col=None, header=None)
        #df.drop(df.columns[[1, 2]], axis=1, inplace=True)
        d = d.iloc[:, [0,7,9]] 
        d.columns = ['sample','gene','class']
        wanted.columns = ['class']
        d = d[d['class'].isin(wanted['class'])]
        d.drop(columns=['class'], inplace=True)
        #pi = d.pivot(index="sample", columns="gene", values="value") # cumbersome cmq
        pi = pd.pivot_table(d, index=['sample'], columns='gene', aggfunc=lambda x: 1, fill_value=0)
        pi.to_csv(output.res, sep='\t', index=True, compression='gzip')

# TODO add tmp to rimage output of phangon_bulk rule once we are satisfied with the plot
rule phangorn_plot:
    input: rimage="tree_bulk_{vv}.Rdata"
    output: pdf="nobs_tree_bulk_{vv}.pdf"
    script: SRC_DIR+"/phangorn_plots.R"

rule cn_plot:
    input: tree=PRJ_ROOT+"/local/share/data/trees_cn/"+MODEL+"_final_tree.new"
    output: plot="cn_plot.pdf"
    params: model=MODEL, nexus="no"
    script: SRC_DIR+"/newick_plot.R"

rule cn_distances:
    input: tree=PRJ_ROOT+"/local/share/data/trees_cn/"+MODEL+"_final_tree.new"
    output: dist="cn_distances.tsv"
    params: model=MODEL, nexus="no"
    script: SRC_DIR+"/newick_cn.R"


rule snvindel_distances:
    input: tree="tree_bulk_vitro.nexus"
    output: dist="snvindel_distances.tsv"
    params: model=MODEL, nexus="yes"
    script: SRC_DIR+"/newick_cn.R"


rule t1_t2_distances:
    input: dist="{kind}_distances.tsv"
    output: tips="{kind}_tips.tsv"
    script: SRC_DIR+"/tips.R"

include: "conf.sk"
#### first data for Orso on bexp on 30x
DEPTHS = ['10x','20x','30x','40x','50x']

rule all_merge:
    input: ['merged_' + x for x in DEPTHS]
    output: "all_bexp_different_coverage.tsv"
    shell: 
        """
            head -n 1 {input[0]} > {output}
            cat {input} | grep -v -w called_in_gen >> {output}
        """

rule merge:
    input: bonf='CRC1307_mutect_nobin_{depth}/bexp_n_gen.bonf.tsv', bh='CRC1307_mutect_nobin_{depth}/bexp_n_gen.bh.tsv', len='CRC1307_mutect_nobin_{depth}/all.lengthgen.txt'
    output: "merged_{depth}"
    run:
        import pandas as pd
        bonf = pd.read_csv(input.bonf, sep="\t", index_col=0)
        bh = pd.read_csv(input.bh, sep="\t", index_col=0)
        covered = pd.read_csv(input.len, sep="\t", index_col=0)
        bonf['correction'] = 'bonf'
        bh['correction'] = 'bh'
        covered['coverage'] = wildcards.depth
        bexp = pd.concat([bonf, bh])
        tot = bexp.join(covered, how='inner')
        tot.to_csv(output[0], sep="\t", header=True)


#### signatures TODO definitive


def input_signatures(wildcards):
    import glob
    if wildcards.kind == "vitro":
        return glob.glob("CRC*/platypus_nobin/vitro.merged.vcf.gz")
    elif wildcards.kind == "vivo":
        return glob.glob("CRC*/platypus_nobin/vivo.merged.vcf.gz") 
    elif wildcards.kind == "vitroloss":
        return glob.glob("CRC*/platypus_nobin/vitro.mergedloss.vcf.gz")
    elif wildcards.kind == "vivoloss":
        return glob.glob("CRC*/platypus_nobin/vivo.mergedloss.vcf.gz")
    elif wildcards.kind == "vitrovivobulk":
        return glob.glob("CRC*/platypus_nobin/vitro.merged.vcf.gz") + glob.glob("CRC*/platypus_nobin/vivo.merged.vcf.gz") + BULK_VCF
    elif wildcards.kind == "allstartingvcf":
        print("TODO!")
    else:
        print("wrong option, baby")

# TODO for single clones a different matching strategy is needed
rule all_sign_input:
    input: input_signatures
    output: "signinput_{kind}_{merged}"
    run:
        import re
        with open(output[0],'w') as out:
            for vcf in input:
                crc = re.search('CRC\d{4}(LM|PR)*', vcf) # 1599 have LM/PR and we need to keep it
                sample_kind = "NA"
                sample = crc.group()
                if re.search('vitro', vcf) is not None:
                    sample_kind = 'vitroMA'
                elif re.search('vivo', vcf) is not None:
                    sample_kind = 'vivoMA'
                elif re.search('bulk', vcf) is not None: # but for other bulk we have always LMO...
                    sample_kind = 'bulk'
                    if re.search('1599', vcf) is None: # re remove LM from the un-needed samples. Very bad but at this point this seems the only way around this issue.
                        sample = sample[0:7]
                if re.search('clones_all', vcf) :
                    sample = sample + "-2nd" 
                if re.search('clones_2', vcf) :
                    continue
                annotation = sample + '_' + sample_kind
                out.write("{}\t{}".format(vcf, annotation))
                out.write("\n")
                  

# Todo also print the signature matrixes?
# TODO also print 'selected' heatmap
rule all_sign:
    input: "signinput_vitrovivobulk_merged"
    output: heat="vitrovivobulk_heatmap_{merged}_cosmic.png", cosine="vitrovivobulk_cosine_{merged}_cosmic.png"
    params: tool=BIN_DIR+"/mut_pat_signatures_fit", colors=COLORS_MODELS
    shell:
        """
            {params.tool} {input} {output.heat} {output.cosine} '{params.colors}'
        """


#### shared muts
# right now selection of files is done inside R with list.files, this is DANGEROUS, FIXME
rule shared_clone:
    output: "{hsample}.shared.png"
    params: tool=BIN_DIR+"/private_shared_gains"


#egrassi@godot:/mnt/trcanmed/snaketree/prj/AF_spectra/dataset$ grep wall CRC*/platypus_nobin/dnds.tsv  CRC1307_platypus_nobin/dnds.tsv  | tr "/" "\t" | tr "_" "\t" | cut -f 1,6,7,8
#CRC0282 0.937575744678809       0.852361772254831       1.03130889444349
#CRC0327 1.39346842110341        0.670110088592115       2.89766453851189
#CRC1078 0.647971238408106       0.410085699806697       1.02385117550319
#CRC1502 0.763560613708499       0.456284024078526       1.27776731167463
#CRC1307 1.08332207165535        0.744123741132339       1.57713918541261

#### Overall inputs and summarizing plots
# 0- dnds
# 1- all gained per Mb
# 2- MR vitro
# 3- indels gained per Mb
# 4- indels MR vitro

## inputs
# $4==1 keeps only first 6 months in vitro samples
def kind_MR(wildcards):
    if wildcards.kind == "SNV":
        return expand("{model}/platypus_nobin/all.MR_ov", model=MODELS)
    else:
        return expand("{model}/platypus_nobin_indels/all.MR_ov", model=MODELS)

rule overall_MR_edu_vitro:
    output: "MR_edu_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | bawk '$4==1 || $4 == 2 {{print $2,$8}}' > {output}
        """

rule overall_SNV_gained_norm:
    output: "vitro_gained_norm_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | bawk '$4==1 || $4==2 {{print $2,$5/$6}}' > {output}
        """

rule overall_SNV_gained_norm_vivo:
    output: "vivo_gained_norm_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | bawk '$4!=1 && $4!="class"{{print $2,$5/$6}}' > {output}
        """
        
rule overall_SNV_gained:
    output: "vitro_gained_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | bawk '$4==1 || $4==2 {{print $2,$5}}' > {output}
        """

rule overall_SNV_gained_vivo:
    output: "vivo_gained_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | bawk '$4!=1 && $4!="class"{{print $2,$5}}' > {output}
        """
        
### all dnds
rule all_dnds:
    input: expand("{model}/platypus_nobin/all_gained_named.tsv", model=MODELS)
    output: "dnds.tsv", "dnds.Rdata"
    log: "dnds.log"
    params:  tool=BIN_DIR+"/dnds", rda=DNDSCV_RDA
    shell:
        """
            cat {input} | tr ":" "\\t" | bawk '{{print "all",$2,$3,$4,$5}}' | sort | uniq > {output[0]}.tmp
            {params.tool} {output[0]}.tmp {output} {params.rda} &> {log}
            rm {output[0]}.tmp
        """

rule dnds_vitro:
    input: expand("{model}/platypus_nobin/all_gained_named.tsv", model=MODELS)
    output: "dnds_vitro.tsv", "dnds_vitro.Rdata"
    log: "dnds_vitro.log"
    params:  tool=BIN_DIR+"/dnds", rda=DNDSCV_RDA
    shell:
        """
            cat {input} | tr ":" "\\t" | bawk '$1 !~ /M/ {{print "all",$2,$3,$4,$5}}' | sort | uniq > {output[0]}.tmp
            {params.tool} {output[0]}.tmp {output} {params.rda} &> {log}
            rm {output[0]}.tmp
        """

rule dnds_overall:
    input: expand("{model}/platypus_nobin/dnds.tsv", model=MODELS)
    output: "dnds_overall.tsv"
    shell:
        """
          for f in {input}; do \\
            n=$(echo $f | tr "\/" "\\t" | cut -f 1); \\
            bawk -v name=$n '$1=="wall"{{print name,$3,$4,$5}}' $f; \\
          done > {output}
        """

rule dnds_voverall:
    input: expand("{model}/platypus_nobin/dndsvitro.tsv", model=MODELS)
    output: "dndsvitro_overall.tsv"
    shell:
        """
          for f in {input}; do \\
            n=$(echo $f | tr "\/" "\\t" | cut -f 1); \\
            bawk -v name=$n '$1=="wall"{{print name,$3,$4,$5}}' $f; \\
          done > {output}
        """
## plots
# single plots are from all_gained_named.tsv with also in vivo so we will keep it here
rule dnds_global:
    input: "{dndskind}_overall.tsv"
    output: "{dndskind}_overall.png"
    params: tool=BIN_DIR+"/dnds_plot_overall", colors=COLORS_MODELS
    shell:
        """
            {params.tool} {input} {output} '{params.colors}'
        """

rule dnds_onebyone: # TODO
    input: expand("{model}/platypus_nobin/dnds.tsv", model=MODELS)
    output: "dnds_onebyone.png"
    params: tool=BIN_DIR+"/dnds_plot_onebyone"
    shell:
        """
            {params.tool} {input} {output}
        """

#egrassi@godot:/scratch/trcanmed/AF_spectra/local/bin$ ln -s ../src/MR_plot.R MR_plot
#egrassi@godot:/scratch/trcanmed/AF_spectra/local/bin$ ln -s ../src/gained_plot.R gained_plot
rule MR_edu_plot:
    input: "MR_edu_{kind}"
    output: "MR_edu_{kind}.png"
    params: tool=BIN_DIR+"/MR_plot", colors=MANY_COLORS_MODELS_VITRO
    shell:
        """
            {params.tool} {input} {output} '{params.colors}'
        """

wildcard_constraints:
    kind="[a-zA-Z]+"

rule gained_plot:
    input: "{vivi}_gained_norm_{kind}"
    output: "{vivi}_gained_norm_{kind}.png"
    params: tool=BIN_DIR+"/gained_plot", colors=lambda w: MANY_COLORS_MODELS_VITRO if w.vivi == "vitro" else MANY_COLORS_MODELS_VIVO
    shell:
        """
            {params.tool} {input} {output} '{params.colors}'
        """

### quick and dirty remove 282
rule MSS_MR_edu_plot:
    input: "MR_edu_{kind}"
    output: "MSSMR_edu_{kind}.png"
    params: tool=BIN_DIR+"/MR_plot", colors=MSS_MANY_COLORS_MODELS_VITRO
    shell:
        """
            grep -v CRC0282 {input} > {output}.tmp
            {params.tool} {output}.tmp {output} '{params.colors}'
            rm {output}.tmp
        """

rule MSS_gained_plot:
    input: "{vivi}_gained_norm_{kind}"
    output: "{vivi}_gainedMSS_norm_{kind}.png"
    params: tool=BIN_DIR+"/gained_plot", colors=lambda w: MSS_MANY_COLORS_MODELS_VITRO if w.vivi == "vitro" else MSS_MANY_COLORS_MODELS_VIVO
    shell:
        """
            grep -v CRC0282 {input} > {output}.tmp
            {params.tool} {output}.tmp {output} '{params.colors}' {wildcards.vivi} norm
            rm {output}.tmp
        """

rule MSS_gainednn_plot:
    input: "{vivi}_gained_{kind}"
    output: "{vivi}_gainedMSS_{kind}.png"
    params: tool=BIN_DIR+"/gained_plot", colors=lambda w: MSS_MANY_COLORS_MODELS_VITRO if w.vivi == "vitro" else MSS_MANY_COLORS_MODELS_VIVO
    shell:
        """
            grep -v CRC0282 {input} > {output}.tmp
            {params.tool} {output}.tmp {output} '{params.colors}' {wildcards.vivi} nonorm
            rm {output}.tmp
        """

## TODO b/d



### MutationalPatterns bed
rule chain:
    output: "chain.gz"
    shell: "wget -O {output} http://hgdownload.cse.ucsc.edu/goldenpath/hg19/liftOver/hg19ToHg38.over.chain.gz"


wildcard_constraints:
    which="[\w\d_.]+"   

rule bed:
    input: bed=BED+"/{which}.bed", chain="chain.gz"
    output: bed="{which}.bed", miss="{which}.miss"
    shell:
        """
            liftOver <(bawk '{{print "chr"$1,$2,$3}}' {input.bed}) {input.chain} {output.bed} {output.miss}
        """


### QC #  TODO
#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ for f in  */platypus_nobin/*ovcnokdelta.tsv.gz; do g=$(zcat $f | grep -c gain); l=$(zcat $f | grep -c loss); echo -e "$f\t$g\t$l"; done > gain_loss.snv
#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ for f in  */platypus_nobin_indels/*ovcnokdelta.tsv.gz; do g=$(zcat $f | grep -c gain); l=$(zcat $f | grep -c loss); echo -e "$f\t$g\t$l"; done > gain_loss.indel

### segments
#grassi@godot:/scratch/trcanmed/AF_spectra/dataset$ cat CRC*/platypus_nobin/all_seg_changes.txt > pippo_all_segments_changes.txt


#### gained non syn muts
# Do we keep or remove in vivo? ASK FIXME TODO 
def all_nonsyn(wildcards):
    if wildcards.kind == "SNV":
        return expand("{model}/platypus_nobin/nonsyn.binary.tsv.gz", model=MODELS_NOREP)
    else:
        return expand("{model}/platypus_nobin_indels/nonsyn.binary.tsv.gz", model=MODELS_NOREP)

rule merge_binary_nonsyn:
    output: res="{kind}_nonsyn.binary.tsv.gz"
    input: all_nonsyn
    run:
        import pandas as pd
        d = pd.read_table(input.pop(0), sep='\t', compression="gzip", index_col=0, header=0)
        for i in input:
            x = pd.read_table(i, sep='\t', compression="gzip", index_col=0, header=0)
            d = d.append(x, sort=True).fillna(0)
        d.to_csv(output.res, sep='\t', index=True, compression='gzip')


rule gene_onco:
    input: d="{kind}_nonsyn.binary.tsv.gz", filter=PRJ_ROOT+"/local/share/data/intogen_symbols"
    output: "{kind}_onco_nonsyn.tsv"
    shell:
        """
            zcat {input.d} | bawk 'NR==1' | tr "\\t" "\\n" | tr ";" "\\n" | filter_1col 1 {input.filter} > {output}
        """

#cut -f13,14 /mnt/trcanmed/snaketree/task/variant_annotations/dataset/annovar/hg38/humandb/hg38_refGene.txt  |grep cmpl | sort | uniq | filter_1col 1 ../local/share/data/intogen_symbols | wc -l
#566

#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ cut -f13,14 /mnt/trcanmed/snaketree/task/variant_annotations/dataset/annovar/hg38/humandb/hg38_refGene.txt  |grep cmpl | sort | uniq | filter_1col 1 ../local/share/data/common_iorio_crisp_essential | wc -l
#956

#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ cut -f13,14 /mnt/trcanmed/snaketree/task/variant_annotations/dataset/annovar/hg38/humandb/hg38_refGene.txt  |grep cmpl | sort | uniq | wc -l
#19561
rule gene_essential:
    input: d="{kind}_nonsyn.binary.tsv.gz", filter=PRJ_ROOT+"/local/share/data/common_iorio_crisp_essential"
    output: "{kind}_essential_nonsyn.tsv"
    shell:
        """
            zcat {input.d} | bawk 'NR==1' | tr "\\t" "\\n" | tr ";" "\\n" | filter_1col 1 {input.filter} > {output}
        """
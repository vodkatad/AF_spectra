include: "conf.sk"

#### first data for Orso on bexp on 30x
DEPTHS = ['10x','20x','30x','40x','50x']

rule all_merge:
    input: ['merged_' + x for x in DEPTHS]
    output: "all_bexp_different_coverage.tsv"
    shell: 
        """
            head -n 1 {input[0]} > {output}
            cat {input} | grep -v -w called_in_gen >> {output}
        """

rule merge:
    input: bonf='CRC1307_mutect_nobin_{depth}/bexp_n_gen.bonf.tsv', bh='CRC1307_mutect_nobin_{depth}/bexp_n_gen.bh.tsv', len='CRC1307_mutect_nobin_{depth}/all.lengthgen.txt'
    output: "merged_{depth}"
    run:
        import pandas as pd
        bonf = pd.read_csv(input.bonf, sep="\t", index_col=0)
        bh = pd.read_csv(input.bh, sep="\t", index_col=0)
        covered = pd.read_csv(input.len, sep="\t", index_col=0)
        bonf['correction'] = 'bonf'
        bh['correction'] = 'bh'
        covered['coverage'] = wildcards.depth
        bexp = pd.concat([bonf, bh])
        tot = bexp.join(covered, how='inner')
        tot.to_csv(output[0], sep="\t", header=True)


#### signatures TODO definitive


def input_signatures(wildcards):
    import glob
    if wildcards.kind == "vitro":
        return glob.glob("CRC*/platypus_nobin/vitro.merged.vcf.gz")
    elif wildcards.kind == "vivo":
        return glob.glob("CRC*/platypus_nobin/vivo.merged.vcf.gz") 
    elif wildcards.kind == "vitroloss":
        return glob.glob("CRC*/platypus_nobin/vitro.mergedloss.vcf.gz")
    elif wildcards.kind == "vivoloss":
        return glob.glob("CRC*/platypus_nobin/vivo.mergedloss.vcf.gz")
    elif wildcards.kind == "vitrovivobulk":
        return glob.glob("CRC*/platypus_nobin/vitro.merged.vcf.gz") + glob.glob("CRC*/platypus_nobin/vivo.merged.vcf.gz") + BULK_VCF
    elif wildcards.kind == "allstartingvcf":
        print("TODO!")
    else:
        print("wrong option, baby")

# TODO for single clones a different matching strategy is needed
rule all_sign_input:
    input: input_signatures
    output: "signinput_{kind}_{merged}"
    run:
        import re
        with open(output[0],'w') as out:
            for vcf in input:
                crc = re.search('CRC\d{4}(LM|PR)*', vcf) # 1599 have LM/PR and we need to keep it
                sample_kind = "NA"
                sample = crc.group()
                if re.search('vitro', vcf) is not None:
                    sample_kind = 'vitroMA'
                elif re.search('vivo', vcf) is not None:
                    sample_kind = 'vivoMA'
                elif re.search('bulk', vcf) is not None: # but for other bulk we have always LMO...
                    sample_kind = 'bulk'
                    if re.search('1599', vcf) is None: # re remove LM from the un-needed samples. Very bad but at this point this seems the only way around this issue.
                        sample = sample[0:7]
                if re.search('clones_all', vcf) :
                    sample = sample + "-2nd" 
                if re.search('clones_2', vcf) :
                    continue
                annotation = sample + '_' + sample_kind
                out.write("{}\t{}".format(vcf, annotation))
                out.write("\n")
                  

# Todo also print the signature matrixes?
# TODO also print 'selected' heatmap
rule all_sign:
    input: "signinput_vitrovivobulk_merged"
    output: heat="vitrovivobulk_heatmap_{merged}_cosmic.png", cosine="vitrovivobulk_cosine_{merged}_cosmic.png"
    params: tool=BIN_DIR+"/mut_pat_signatures_fit", colors=COLORS_MODELS_2
    shell:
        """
            {params.tool} {input} {output.heat} {output.cosine} '{params.colors}'
        """


#### shared muts
# right now selection of files is done inside R with list.files, this is DANGEROUS, FIXME
rule shared_clone:
    output: "{hsample}.shared.png"
    params: tool=BIN_DIR+"/private_shared_gains"


#egrassi@godot:/mnt/trcanmed/snaketree/prj/AF_spectra/dataset$ grep wall CRC*/platypus_nobin/dnds.tsv  CRC1307_platypus_nobin/dnds.tsv  | tr "/" "\t" | tr "_" "\t" | cut -f 1,6,7,8
#CRC0282 0.937575744678809       0.852361772254831       1.03130889444349
#CRC0327 1.39346842110341        0.670110088592115       2.89766453851189
#CRC1078 0.647971238408106       0.410085699806697       1.02385117550319
#CRC1502 0.763560613708499       0.456284024078526       1.27776731167463
#CRC1307 1.08332207165535        0.744123741132339       1.57713918541261

#### Overall inputs and summarizing plots
# 0- dnds
# 1- all gained per Mb
# 2- MR vitro
# 3- indels gained per Mb
# 4- indels MR vitro

## inputs
# $4==1 keeps only first 6 months in vitro samples
def kind_MR(wildcards):
    if wildcards.kind == "SNV":
        return expand("{model}/platypus_nobin/all.MR_ov", model=MODELS)
    elif wildcards.kind == "indel":
        return expand("{model}/platypus_nobin_indels/all.MR_ov", model=MODELS)
<<<<<<< Updated upstream
    elif wildcards.kind == "mrca":
        return expand("{model}/platypus_nobin/all_mrca.tsv", model=MODELS_NOREP_TRUE)
    elif wildcards.kind == "subclonal":
        return expand("{model}/mutect_nobin/all_subclonal_n.tsv", model=MODELS_NOREP_TRUE)
    else: 
        print("boh!")
=======
    else:
        return expand("{model}/platypus_nobin/all_mrca.tsv", model=MODELS_NOREP_TRUE)
>>>>>>> Stashed changes

def kind_MR_large(wildcards):
    #res = kind_MR(wildcards) # get all and keep all for doubles, now, lazy and tired
    res = ['CRC0282/platypus_nobin/all.MR_ov', 'CRC0327/platypus_nobin/all.MR_ov', 'CRC0441/platypus_nobin/all.MR_ov', 
    'CRC1078_clones_all/platypus_nobin/all.MR_ov', 'CRC1307_clones_all/platypus_nobin/all.MR_ov', 'CRC1502_clones_all/platypus_nobin/all.MR_ov',
    'CRC1599LM_clones_all/platypus_nobin/all.MR_ov', 'CRC1599PR/platypus_nobin/all.MR_ov',
    'NT_CRC1430/platypus_nobin/all.MR_baseline_ov',  'NT_CRC1620/platypus_nobin/all.MR_baseline_ov']
    #,
    #'T_CRC1430/platypus_nobin/all.MR_baseline_ov', 'T_CRC1620/platypus_nobin/all.MR_baseline_ov']
    return res

rule new_players:
    input: 'NT_CRC1430/platypus_nobin/all.MR_baseline_ov',  'NT_CRC1620/platypus_nobin/all.MR_baseline_ov'
    output: 'MR_edu_new_SNV'
    shell: "cat {input} | grep -v clone | cut -f 2,8> {output}"

rule new_players_MR_edu:
    input: old= "MR_edu_SNV", new="MR_edu_new_SNV", ggtheme=GGTHEME
    output: "MR_edu_SNV_newplayers.png"
    params: tool=BIN_DIR+"/MR_plot_newplayers", colors=MANY_COLORS_MODELS_VITRO_NEW
    shell:
        """ 
            cat {input.old} {input.new} > {output}.tmp
            {params.tool} {output}.tmp {output} '{params.colors}' {input.ggtheme}
            rm {output}.tmp
        """

rule overall_MR_edu_conte:
    output: "MR_edu_conte_{kind}.pdf"
    input: kind_MR_large
    params: tool=BIN_DIR+"/plot_EDU_conte", colors=COLORS_MODELS_2+',#5efeef,#7c7c7c'
    shell:
        """
            {params.tool} {output} "{params.colors}" {input}
        """

rule overall_MR_edu_vitro:
    output: "MR_edu_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | bawk '$4==1 || $4 == 2 {{print $2,$8}}' > {output}
        """

rule overall_mrca:
    input: kind_MR
    output: "shared_{kind}"
    shell:
        """
            cat {input} | grep -v clone_other  | grep -v '\-M' | bawk '{{print $2"_"$3,$4}}' > {output}
        """

<<<<<<< Updated upstream
rule overall_subcl:
    input: kind_MR
    output: "fixedthr_{kind}"
    shell:
        """
            cat {input} | grep -v '\-M' |  bawk '$3==0.24 && $2==0.05 {print $1,$2}' | tr "-" "\\t" | cut -f 1,4 > {output}
        """

=======
>>>>>>> Stashed changes
rule mrca_plot:
    input: "shared_mrca"
    output: "mrca.png"
    params: tool=BIN_DIR+"/generic_clones_plot", colors=MANY_COLORS_MODELS_VITRO
    shell:
        """
            {params.tool} {input} {output} '{params.colors}' birth
        """


rule overall_SNV_gained_norm:
    output: "vitro_gained_norm_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | bawk '$4==1 || $4==2 {{print $2,$5/$6}}' > {output}
        """

rule overall_SNV_gained_norm_vivo:
    output: "vivo_gained_norm_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | bawk '$4!=1 && $4!=2 && $4!="class"{{print $2,$5/$6}}' > {output}
        """
        
rule overall_SNV_gained:
    output: "vitro_gained_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | bawk '$4==1 || $4==2 {{print $2,$5}}' > {output}
        """

rule overall_SNV_gained_vivo:
    output: "vivo_gained_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | bawk '$4!=1 && $4 != 2 && $4!="class"{{print $2,$5}}' > {output}
        """

rule average_model:
    input: '{any}'
    output: '{any}_averaged.tsv'
    params: tool=BIN_DIR+'/average_model'
    shell:
        """
            {params.tool} {input} {output}
        """

rule correlation_snv_indel:
    input: x='MR_edu_SNV_averaged.tsv', y='MR_edu_indel_averaged.tsv'
    output: 'MR_SNV_indel.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove="CRC0282", palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean MR_SNV MR_indel yes
        """

rule correlation_snv_indel_n:
    input: x='vitro_gained_norm_SNV_averaged.tsv', y='vitro_gained_norm_indel_averaged.tsv'
    output: 'gainednorm_SNV_indel.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove="CRC0282", palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean gainedMB_SNV gainedMB_indel no
        """

rule correlation_snv_indel_nn:
    input: x='vitro_gained_SNV_averaged.tsv', y='vitro_gained_indel_averaged.tsv'
    output: 'gained_SNV_indel.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove="CRC0282", palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean gained_SNV gained_indel no
        """


rule correlation_snv_bulkburden:
    input: x='MR_edu_SNV_averaged.tsv', y=PRJ_ROOT+'/local/share/data/bulkburdens_snv'
    output: 'bulkburden_SNV.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove='CRC0282', palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean MR_SNV bulk_burden no
        """

rule correlation_indel_bulkburden:
    input: x='MR_edu_indel_averaged.tsv', y=PRJ_ROOT+'/local/share/data/bulkburdens_indel'
    output: 'bulkburden_indel.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove='CRC0282', palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean MR_indel bulk_burden no
        """

rule correlation_vitrovivo:
    input: x='vitro_gained_norm_{kind}_averaged.tsv', y='vivo_gained_norm_{kind}_averaged.tsv'
    output: 'gainednorm_vivo_{kind}.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove="CRC0282", palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean gainedMB_{wildcards.kind}_vitro gainedMB_{wildcards.kind}_vivo no
        """

rule correlation_vitrovivo_msi:
    input: x='vitro_gained_norm_{kind}_averaged.tsv', y='vivo_gained_norm_{kind}_averaged.tsv'
    output: 'gainednorm_vivoall_{kind}.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove="plh", palette=COLORS_MODELS_2
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean gainedMB_{wildcards.kind}_vitro gainedMB_{wildcards.kind}_vivo no
        """


rule correlation_vitrovivo_nn:
    input: x='vitro_gained_{kind}_averaged.tsv', y='vivo_gained_{kind}_averaged.tsv'
    output: 'gained_vivo_{kind}.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove="CRC0282", palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean gained_{wildcards.kind}_vitro gained_{wildcards.kind}_vivo no
        """
### all dnds
rule all_dnds:
    input: expand("{model}/platypus_nobin/all_gained_named.tsv", model=MODELS)
    output: "dnds.tsv", "dnds.Rdata"
    log: "dnds.log"
    params:  tool=BIN_DIR+"/dnds", rda=DNDSCV_RDA
    shell:
        """
            cat {input} | tr ":" "\\t" | bawk '{{print "all",$2,$3,$4,$5}}' | sort | uniq > {output[0]}.tmp
            {params.tool} {output[0]}.tmp {output} {params.rda} &> {log}
            rm {output[0]}.tmp
        """
 
rule all_dnds_vitroMSS:
    input: expand("{model}/platypus_nobin/all_gained_named.tsv", model=MODELS[1:])
    output: "dnds_vitroMSS.tsv", "dnds_vitroMSS.Rdata"
    log: "dnds_vitroMSS.log"
    params:  tool=BIN_DIR+"/dnds", rda=DNDSCV_RDA
    shell:
        """
            cat {input} | tr ":" "\\t" | bawk '$1 !~ /-M/ {{print "all",$2,$3,$4,$5}}' | sort | uniq > {output[0]}.tmp
            {params.tool} {output[0]}.tmp {output} {params.rda} &> {log}
            rm {output[0]}.tmp
        """

rule dnds_vitro:
    input: expand("{model}/platypus_nobin/all_gained_named.tsv", model=MODELS)
    output: "dnds_vitro.tsv", "dnds_vitro.Rdata"
    log: "dnds_vitro.log"
    params:  tool=BIN_DIR+"/dnds", rda=DNDSCV_RDA
    shell:
        """
            cat {input} | tr ":" "\\t" | bawk '$1 !~ /M/ {{print "all",$2,$3,$4,$5}}' | sort | uniq > {output[0]}.tmp
            {params.tool} {output[0]}.tmp {output} {params.rda} &> {log}
            rm {output[0]}.tmp
        """

rule dnds_overall:
    input: expand("{model}/platypus_nobin/dnds.tsv", model=MODELS)
    output: "dnds_overall.tsv"
    shell:
        """
          for f in {input}; do \\
            n=$(echo $f | tr "\/" "\\t" | cut -f 1); \\
            bawk -v name=$n '$1=="wall"{{print name,$3,$4,$5}}' $f; \\
          done > {output}
        """

rule dnds_voverall:
    input: expand("{model}/platypus_nobin/dndsvitro.tsv", model=MODELS)
    output: "dndsvitro_overall.tsv"
    shell:
        """
          for f in {input}; do \\
            n=$(echo $f | tr "\/" "\\t" | cut -f 1); \\
            bawk -v name=$n '$1=="wall"{{print name,$3,$4,$5}}' $f; \\
          done | sed 's/clones_all/2nd/i'> {output}
        """
## plots
# single plots are from all_gained_named.tsv with also in vivo so we will keep it here
rule dnds_global:
    input: "{dndskind}_overall.tsv"
    output: "{dndskind}_overall.png"
    params: tool=BIN_DIR+"/dnds_plot_overall", colors=COLORS_MODELS_3
    shell:
        """
            {params.tool} {input} {output} '{params.colors}' {output}.Rimage
        """

rule dnds_plot_MSIMSS:
    input: msi="CRC0282/platypus_nobin/dndsvitro.tsv", mss="dnds_vitroMSS.tsv"
    output: "dnds_MSIMSS.png"
    params: tool=BIN_DIR+"/dnds_plot_all", colors='#cc3300,#6666ff'
    shell:
        """
            {params.tool} {input} {output} '{params.colors}'
        """

rule dnds_onebyone: # TODO
    input: expand("{model}/platypus_nobin/dnds.tsv", model=MODELS)
    output: "dnds_onebyone.png"
    params: tool=BIN_DIR+"/dnds_plot_onebyone"
    shell:
        """
            {params.tool} {input} {output}
        """

rule MR_edu_plot:
    input: data="MR_edu_{kind}", ggtheme=GGTHEME
    output: "MR_edu_{kind}.png"
    params: tool=BIN_DIR+"/MR_plot", colors=MANY_COLORS_MODELS_VITRO
    shell:
        """
            {params.tool} {input.data} {output} '{params.colors}' {input.ggtheme}
        """

wildcard_constraints:
    kind="[a-zA-Z]+"

rule gained_plot:
    input: "{vivi}_gained_norm_{kind}"
    output: "{vivi}_gained_norm_{kind}.png"
    params: tool=BIN_DIR+"/gained_plot", colors=lambda w: MANY_COLORS_MODELS_VITRO if w.vivi == "vitro" else MANY_COLORS_MODELS_VIVO
    shell:
        """
            {params.tool} {input} {output} '{params.colors}' {wildcards.vivi} norm
        """

rule gained_nn_plot:
    input: "{vivi}_gained_{kind}"
    output: "{vivi}_gained_{kind}.png"
    params: tool=BIN_DIR+"/gained_plot", colors=lambda w: MANY_COLORS_MODELS_VITRO if w.vivi == "vitro" else MANY_COLORS_MODELS_VIVO
    shell:
        """
            {params.tool} {input} {output} '{params.colors}' {wildcards.vivi} nonorm
        """
        
### quick and dirty remove 282
rule MSS_MR_edu_plot:
    input: "MR_edu_{kind}"
    output: "MSSMR_edu_{kind}.png"
    params: tool=BIN_DIR+"/MR_plot", colors=MSS_MANY_COLORS_MODELS_VITRO
    shell:
        """
            grep -v CRC0282 {input} > {output}.tmp
            {params.tool} {output}.tmp {output} '{params.colors}'
            rm {output}.tmp
        """

rule MSS_gained_plot:
    input: "{vivi}_gained_norm_{kind}"
    output: "{vivi}_gainedMSS_norm_{kind}.png"
    params: tool=BIN_DIR+"/gained_plot", colors=lambda w: MSS_MANY_COLORS_MODELS_VITRO if w.vivi == "vitro" else MSS_MANY_COLORS_MODELS_VIVO
    shell:
        """
            grep -v CRC0282 {input} > {output}.tmp
            {params.tool} {output}.tmp {output} '{params.colors}' {wildcards.vivi} norm
            rm {output}.tmp
        """

rule MSS_gainednn_plot:
    input: "{vivi}_gained_{kind}"
    output: "{vivi}_gainedMSS_{kind}.png"
    params: tool=BIN_DIR+"/gained_plot", colors=lambda w: MSS_MANY_COLORS_MODELS_VITRO if w.vivi == "vitro" else MSS_MANY_COLORS_MODELS_VIVO
    shell:
        """
            grep -v CRC0282 {input} > {output}.tmp
            {params.tool} {output}.tmp {output} '{params.colors}' {wildcards.vivi} nonorm
            rm {output}.tmp
        """


### MutationalPatterns bed
rule chain:
    output: "chain.gz"
    shell: "wget -O {output} http://hgdownload.cse.ucsc.edu/goldenpath/hg19/liftOver/hg19ToHg38.over.chain.gz"


wildcard_constraints:
    which="[\w\d_.]+"   

rule bed:
    input: bed=BED+"/{which}.bed", chain="chain.gz"
    output: bed="{which}.bed", miss="{which}.miss"
    shell:
        """
            liftOver <(bawk '{{print "chr"$1,$2,$3}}' {input.bed}) {input.chain} {output.bed} {output.miss}
        """


### QC #  TODO
#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ for f in  */platypus_nobin/*ovcnokdelta.tsv.gz; do g=$(zcat $f | grep -c gain); l=$(zcat $f | grep -c loss); echo -e "$f\t$g\t$l"; done > gain_loss.snv
#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ for f in  */platypus_nobin_indels/*ovcnokdelta.tsv.gz; do g=$(zcat $f | grep -c gain); l=$(zcat $f | grep -c loss); echo -e "$f\t$g\t$l"; done > gain_loss.indel

### segments
#grassi@godot:/scratch/trcanmed/AF_spectra/dataset$ cat CRC*/platypus_nobin/all_seg_changes.txt > pippo_all_segments_changes.txt


#### gained non syn muts
# Do we keep or remove in vivo? Only in vitro!
def all_nonsyn(wildcards):
    if wildcards.kind == "SNV":
        return expand("{model}/platypus_nobin/nonsyn.binary.tsv.gz", model=MODELS_NOREP)
    else:
        return expand("{model}/platypus_nobin_indels/nonsyn.binary.tsv.gz", model=MODELS_NOREP)

rule merge_binary_nonsyn:
    output: res="{kind}_nonsyn.binary.tsv.gz"
    input: all_nonsyn
    run:
        import pandas as pd
        d = pd.read_table(input.pop(0), sep='\t', compression="gzip", index_col=0, header=0)
        d = d[~ d.index.str.contains('-M')]
        d = d.loc[:, (d != 0).any(axis=0)]
        for i in input:
            x = pd.read_table(i, sep='\t', compression="gzip", index_col=0, header=0)
            #x = x[x.sample.str.contains('-M')]
            x = x[~ x.index.str.contains('-M')]
            x = x.loc[:, (x != 0).any(axis=0)]
            d = d.append(x, sort=True).fillna(0)
        d.to_csv(output.res, sep='\t', index=True, compression='gzip')


rule gene_onco:
    input: d="{kind}_nonsyn.binary.tsv.gz", filter=PRJ_ROOT+"/local/share/data/intogen_symbols"
    output: "{kind}_onco_nonsyn.tsv"
    shell:
        """
            zcat {input.d} | bawk 'NR==1' | tr "\\t" "\\n" | tr ";" "\\n" | filter_1col 1 {input.filter} > {output}
        """

rule gene_oncog:
    input: d="{kind}_nonsyn.binary.tsv.gz", filter=PRJ_ROOT+"/local/share/data/oncog"
    output: "{kind}_oncog_nonsyn.tsv"
    shell:
        """
            zcat {input.d} | bawk 'NR==1' | tr "\\t" "\\n" | tr ";" "\\n" | filter_1col 1 {input.filter} > {output}
        """

rule gene_tsg:
    input: d="{kind}_nonsyn.binary.tsv.gz", filter=PRJ_ROOT+"/local/share/data/tsb"
    output: "{kind}_tsg_nonsyn.tsv"
    shell:
        """
            zcat {input.d} | bawk 'NR==1' | tr "\\t" "\\n" | tr ";" "\\n" | filter_1col 1 {input.filter} > {output}
        """

CMODELS_NOREP=['CRC0282','CRC0327','CRC0441','CRC1078','CRC1307','CRC1307_clones_all','CRC1502','CRC1502_clones_all','CRC1599LM']
# 1599PR has no cosmic muts, bad fix for now
def all_cosmic(wildcards):
    if wildcards.kind == "SNV":
        return expand("{model}/platypus_nobin/cosmic.binary.tsv.gz", model=CMODELS_NOREP)
    else:
        return expand("{model}/platypus_nobin_indels/cosmic.binary.tsv.gz", model=CMODELS_NOREP)

rule merge_binary_cosmic:
    output: res="{kind}_cosmic.binary.tsv.gz"
    input: all_cosmic
    run:
        import pandas as pd
        d = pd.read_table(input.pop(0), sep='\t', compression="gzip", index_col=0, header=0)
        d = d[~ d.index.str.contains('-M')]
        d = d.loc[:, (d != 0).any(axis=0)]
        for i in input:
            x = pd.read_table(i, sep='\t', compression="gzip", index_col=0, header=0)
            x = x[~ x.index.str.contains('-M')]
            x = x.loc[:, (x != 0).any(axis=0)]
            d = d.append(x, sort=True).fillna(0)
        d.to_csv(output.res, sep='\t', index=True, compression='gzip')



#cut -f13,14 /mnt/trcanmed/snaketree/task/variant_annotations/dataset/annovar/hg38/humandb/hg38_refGene.txt  |grep cmpl | sort | uniq | filter_1col 1 ../local/share/data/intogen_symbols | wc -l
#566

#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ cut -f13,14 /mnt/trcanmed/snaketree/task/variant_annotations/dataset/annovar/hg38/humandb/hg38_refGene.txt  |grep cmpl | sort | uniq | filter_1col 1 ../local/share/data/common_iorio_crisp_essential | wc -l
#956

#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ cut -f13,14 /mnt/trcanmed/snaketree/task/variant_annotations/dataset/annovar/hg38/humandb/hg38_refGene.txt  |grep cmpl | sort | uniq | wc -l
#19561

#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ cut -f13,14 /mnt/trcanmed/snaketree/task/variant_annotations/dataset/annovar/hg38/humandb/hg38_refGene.txt  |grep -w cmpl | sort | uniq | wc -l
#19462
rule gene_essential:
    input: d="{kind}_nonsyn.binary.tsv.gz", filter=PRJ_ROOT+"/local/share/data/common_iorio_crisp_essential"
    output: "{kind}_essential_nonsyn.tsv"
    shell:
        """
            zcat {input.d} | bawk 'NR==1' | tr "\\t" "\\n" | tr ";" "\\n" | filter_1col 1 {input.filter} > {output}
        """



rule vi_merge_binary_nonsyn:
    output: res="{kind}_vinonsyn.binary.tsv.gz"
    input: all_nonsyn
    run:
        import pandas as pd
        d = pd.read_table(input.pop(0), sep='\t', compression="gzip", index_col=0, header=0)
        d = d.loc[:, (d != 0).any(axis=0)]
        for i in input:
            x = pd.read_table(i, sep='\t', compression="gzip", index_col=0, header=0)
            x = x.loc[:, (x != 0).any(axis=0)]
            d = d.append(x, sort=True).fillna(0)
        d.to_csv(output.res, sep='\t', index=True, compression='gzip')

# egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ zcat */platypus_nobin/all.annovar.gz |  cut -f 1  | wc -l
# 838624
# egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ zcat */platypus_nobin/all.annovar.gz |  cut -f 1  | grep -v '\-M' | wc -l
# 681758

#data@rotpunkt:~/work/def_targeted_sanger672_iorio/cn_drivers$ sed 1d  IntOGen_Compendium_Cancer_Genes_19062020.txt  | bawk '$4=="COREAD"{print $1,$10}' | sort |uniq > intogen_crc/all
rule gene_crc_onco_crc:
    input: d="{kind}_nonsyn.binary.tsv.gz", filter=PRJ_ROOT+"/local/share/data/intogen_crc"
    output: "{kind}_oncocrc_nonsyn.tsv"
    shell:
        """
            zcat {input.d} | bawk 'NR==1' | tr "\\t" "\\n" | tr ";" "\\n" | translate -k -a {input.filter} 1 > {output}
        """

# is cmpl the right filter for annovar TODO
# seems so...should use -w to remove incmpl
#https://www.biostars.org/p/152555/
rule n_crc:
    input: genes=PRJ_ROOT+"/local/share/data/intogen_crc", annovar='/mnt/trcanmed/snaketree/task/variant_annotations/dataset/annovar/hg38/humandb/hg38_refGene.txt' 
    output: "crc_n"
    shell:
        """
            cut -f13,14 {input.annovar}  |grep -w cmpl | sort | uniq | filter_1col 1 <(cut -f 1 {input.genes}) | wc -l | bawk '{{print "all",$0}}'> {output}
            cut -f13,14 {input.annovar}  |grep -w cmpl | sort | uniq | filter_1col 1 <(bawk '$2=="LoF"{{print $1}}' {input.genes}) | wc -l | bawk '{{print "tsg",$0}}' >> {output}
            cut -f13,14 {input.annovar}  |grep -w cmpl | sort | uniq | filter_1col 1 <(bawk '$2=="Act"{{print $1}}' {input.genes}) | wc -l | bawk '{{print "oncog",$0}}' >> {output}
        """

### n. of common muts in t0 clones

rule all_neutralQ:
    input: expand("{model}/tree/0_common.matrix.tsv.gz", model=MODELS_NOREP_TRUE)
    output: "neutralQ.tsv"
    shell:
        """
            echo -e "model\\tmean" > {output}
            for f in {input}; do
                echo -en "$f\\t" | tr "\/" "\\t" | cut -f 1 | tr "\\n" "\\t"  >> {output}
                zcat $f | sed 1d | wc -l >> {output}
            done;
        """


rule correlation_snv_neutralqburden:
    input: x='MR_edu_SNV_averaged.tsv', y='neutralQ.tsv'
    output: 'neutralqburden_SNV.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove='CRC0282', palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean MR_SNV bulk_burden no
        """

# rule correlation_indel_neutralqburden:
#     input: x='MR_edu_indel_averaged.tsv', y=PRJ_ROOT+'/local/share/data/bulkburdens_indel'
#     output: 'neutralqburden_indel.pdf'
#     params: tool=BIN_DIR+'/corrplot', toremove='plh', palette=COLORS_MODELS_2
#     shell:
#         """
#             {params.tool} {params.toremove} '{params.palette}' {input} {output} mean MR_indel bulk_burden no
#         """


### bulk annovar
def find_bulk(wildcards):
    regex = '.+'+wildcards.b+'.+'
    res = [x for x in BULK_VCF if re.match(regex, x)]
    if len(res) == 1:
        return res[0]
    else:
        print("Something murky in bulk!")
        print(res)
        print(wildcards.b)
        print(BULK_VCF)


rule annovar:
    input: find_bulk, ANNOVAR
    output: "{b}.multianno.txt"
    log: "{b}.multianno.log"
    params: ver="hg38"
    shell:
        """
        table_annovar.pl {input[0]} {input[1]} --otherinfo -buildver {params.ver} -out merged -remove -protocol refGene,avsnp150,cosmic87_coding -vcfinput -operation g,f,f -nastring . -polish &> {log}
        bawk '{{print "{wildcards.b}", $0}}' < merged.hg38_multianno.txt > {output}
        rm merged.hg38_multianno.txt
        """

rule all_all_annovar:
    input: expand("{b}.multianno.txt", b=MODELS_NOREP_TRUE[:-1])
    output: "all.annovar.gz"
    shell: "cat {input} | sed 1d | gzip >  {output}"
    

rule binary_nonsyn:
    input: data="all.annovar.gz", wanted=PRJ_ROOT+"/local/share/data/nonsyn"
    output: res="nonsyn.binary.tsv.gz"
    run:
        import pandas as pd
        d = pd.read_table(input.data, sep='\t', index_col=None, header=None)
        wanted = pd.read_table(input.wanted, sep='\t', index_col=None, header=None)
        #df.drop(df.columns[[1, 2]], axis=1, inplace=True)
        d = d.iloc[:, [0,7,9,25]]  #also AF info
        d.columns = ['sample','gene','class','info']
        wanted.columns = ['class']
        d = d[d['class'].isin(wanted['class'])]
        d.drop(columns=['class'], inplace=True)
        d['afs'] = [x.split(':')[2] for x in  d['info'].values]
        d.drop(columns=['info'], inplace=True)
        #pi = d.pivot(index="sample", columns="gene", values="value") # cumbersome cmq
        pi = pd.pivot_table(d, index=['sample'], columns='gene', aggfunc=lambda x: max(x), fill_value=0)
        pi.columns = pi.columns.droplevel()
        pi.transpose().to_csv(output.res, sep='\t', index=True, compression='gzip')


### growth rates
rule average_model_birth:
    input: B
    output: 'birth_averaged.tsv'
    params: tool=BIN_DIR+'/average_model'
    shell:
        """
            {params.tool} {input} {output}
        """

rule correlation_snv_birthrate:
    input: x='MR_edu_{mut}_averaged.tsv', y='birth_averaged.tsv'
    output: 'birth_{mut}.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove='CRC0282', palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean MR_{wildcards.mut} birth_rate no
        """


rule average_model_bdeath:
    input: B_D
    output: 'birthdeath_averaged.tsv'
    params: tool=BIN_DIR+'/average_model'
    shell:
        """
            {params.tool} {input} {output}
        """

rule correlation_snv_bdeathrate:
    input: x='MR_edu_{mut}_averaged.tsv', y='birthdeath_averaged.tsv'
    output: 'birthdeath_{mut}.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove='CRC0282', palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean MR_{wildcards.mut} birthdeath_rate no
        """

rule birth_plot:
    input: B
    output: "birth_clones.png"
    params: tool=BIN_DIR+"/generic_clones_plot", colors=MANY_COLORS_MODELS_VITRO
    shell:
        """
            {params.tool} {input} {output} '{params.colors}' birth
        """


rule birth_plot_TEMP:
    input: PRJ_ROOT+'/local/share/data/bdTEMP.txt'
    output: "birth_TEMP.png"
    params: tool=BIN_DIR+"/generic_clones_plot", colors=MANY_COLORS_MODELS_VITRO
    shell:
        """
            {params.tool} {input} {output} '{params.colors}' birth
        """

rule correlation_snvn_birthrate:
    input: x='vitro_{gained}_{mut}_averaged.tsv', y='birth_averaged.tsv'
    output: 'birth_{gained}_{mut}.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove='CRC0282', palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean {wildcards.gained}_{wildcards.mut} birth_rate no
        """

rule correlation_snvn_bdeathrate:
    input: x='vitro_{gained}_{mut}_averaged.tsv', y='birthdeath_averaged.tsv'
    output: 'birthdeath_{gained}_{mut}.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove='CRC0282', palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean {wildcards.gained}_{wildcards.mut} birthdeath_rate no
        """

### quick and dirty correlation between n. of subclonal and MR
def kind_subclonal(wildcards):
    if wildcards.kind == "SNV":
        return expand("{model}/mutect_nobin/n_subclonal_norm.txt", model=MODELS_NOREP)
    else:
        return expand("{model}/mutect_nobin_indels/n_subclonal_norm.txt", model=MODELS_NOREP_TRUE)

rule tot_SNV_subclonal:
    output: "subclonal_{kind}"
    input: kind_subclonal
    shell:
        """
            cat {input} > {output}
        """

rule correlation_snv_subclonal:
    input: x='MR_edu_SNV_averaged.tsv', y='subclonal_SNV_averaged.tsv'
    output: 'MR_SNV_subclonal.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove="CRC0282", palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean MR_SNV n_subclonal_norm no
        """

#### other bed files
rule bed_simplerepeat:
    input: SNAKE_ROOT+'/task/annotations/local/share/data/hg38_simpleRepeat.txt.gz'
    output: 'simpleRepeat.bed'
    shell: 
        """
            zcat {input} | cut -f 2,3,4 |sort -k1,1 -k2,2n |uniq | bedtools merge -i -  > {output}
        """

rule bed_repeatmask:
    input: SNAKE_ROOT+'/task/annotations/local/share/data/hg38_rmsk.txt.gz'
    output: 'rmsk.bed'
    shell: 
        """
            zcat {input} | cut -f 6,7,8 |sort -k1,1 -k2,2n |uniq | bedtools merge -i - > {output}
        """

#### Rule new de novo signature input
## SparseSignatures
def kind_signin(wildcards):
    if wildcards.kind == "MSS":
        return expand("{model}/platypus_nobin/all_signin.tsv", model=MODELS[1:])
    else:
        return expand("{model}/platypus_nobin/all_signin.tsv", model=MODELS)

rule sparsesign_input:
    input: kind_signin
    output: "{kind}_signin.tsv"
    shell:  
        """
            echo -e "sample\\tchrom\\tstart\\tend\\tref\\talt" > {output}
            cat {input} | grep -v -w sample >> {output}  
        """

## sigProfilerExtractor
def kind_sigprof_input(wildcards):
    import glob
    res = []
    if wildcards.kind == "MSS":
        for m in MODELS_NOREP_TRUE[1:]:
            f = glob.glob(m+"/platypus_nobin/*signin.vcf")
            res.append(f)
    flat_list = [item for sublist in res for item in sublist]
    return flat_list

rule sigprofiler_input_dir:
    input: kind_sigprof_input
    output: directory("{kind}_sigprof")
    shell:  
        """
            mkdir -p {output}
            cp {input} {output}
        """

# failed test cause sigprofiler vcf wtf?
#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset/MSS_mutpat$ for f in ../MSS_sigprof/*vcf; do b=`basename $f`; cat $f| bawk 'NR==1{print $1,$2,"ID",$4,$5} NR!=1 {print $1,$2,NR,$4,$5}'> $b ; done 

# MutPat
def kind_mutpatstarting_input(wildcards):
    import glob
    res = []
    if wildcards.kind == "MSS":
        ms = MODELS[1:]
    else:
        ms = MODELS
    for m in ms:
        f = glob.glob(m+"/platypus_nobin/*mutpatin.vcf")
        res.append(f)
    flat_list = [item for sublist in res for item in sublist]
    return flat_list


# we still have 2nd round clones as separate samples...keep only first round to start with, then FIXME TODO HOW
rule mutpat_input_startingclones:
    input: kind_mutpatstarting_input
    output: "{kind}_mutpatin_startingclones.tsv"
    run:
        import os
        import re
        with open(output[0],'w') as o:
            for i in input:
                bn = os.path.basename(i)
                bns = bn.split('.')
                if not re.match('.+clones_all.+', i):
                    o.write('{}\t{}\n'.format(i, bns[0]))
                

#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ nsnakemake mutpat_input > meh
#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ paste meh <(tr "/" "\t" < meh| cut -f 3 | sed 's/\.mutpatin\.vcf//g') > mehh

rule modelmerged_nobulk:
    input: 'signinput_vitrovivobulk_merged'
    output: 'all_signinput_vitrovivo_merged'
    shell: "grep -v _bulk {input} > {output}"

rule modelmerged_nobulk_MSS:
    input: 'all_signinput_vitrovivo_merged'
    output: 'MSS_signinput_vitrovivo_merged'
    shell: "grep -v CRC0282 {input} > {output}"

rule sign_1:
    input: "{kind}_mutpatin_startingclones.tsv"
    output: directory("{k}_{kind}_mutpat_denovo")
    params: tool=BIN_DIR+"/mut_pat_signatures_denovo", colors=COLORS_MODELS
    shell:
        """
            mkdir -p {output}
            {params.tool} {input} {output} '{params.colors}' {wildcards.k} mutpat.Rdata
        """
        
rule sign_2:
    input: "{kind}_signinput_vitrovivo_merged"
    output: directory("{k}_{kind}_mutpat2_denovo")
    params: tool=BIN_DIR+"/mut_pat_signatures_denovo", colors=COLORS_MODELS
    shell:
        """
            mkdir -p {output}
            {params.tool} {input} {output} '{params.colors}' {wildcards.k} mutpat.Rdata
        """

# risky with glob, FIXME TODO
def kind_mutpatstarting_input3(wildcards):
    import glob
    res = []
    if wildcards.kind == "MSS":
        ms = MODELS[1:]
    else:
        ms = MODELS
    for m in ms:
        f = glob.glob(m+"/platypus_nobin/*gain.vcf.gz")
        res.append(f)
    flat_list = [item for sublist in res for item in sublist]
    return flat_list

rule sign_3_input:
    input:  kind_mutpatstarting_input3
    output: "{kind}_signinput3.tsv"
    shell:
        """
            echo {input} | tr " " "\\n" | sort | perl -ane 'if ($_ =~ /\/(CRC\d+.*?)_/) {{print $1."\\n"}}' > {output}.tmp
            echo {input} | tr " " "\\n" | sort > {output}.tmp2
            paste {output}.tmp2 {output}.tmp > {output}
        """

# wtf?
#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ tail all_signinput3.tsv
#CRC1599LM/platypus_nobin/CRC1599LM-03-1-E_CRC1599LM-03-0.gain.vcf.gz    CRC1599LM-07-MI-D
#CRC1599LM/platypus_nobin/CRC1599LM-07-MI-C_CRC1599LM-07-0.gain.vcf.gz   CRC1599LM-07-MI-E
#CRC1599LM/platypus_nobin/CRC1599LM-07-MI-D_CRC1599LM-07-0.gain.vcf.gz   CRC1599PR-01-1-E
#CRC1599LM/platypus_nobin/CRC1599LM-07-MI-E_CRC1599LM-07-0.gain.vcf.gz   CRC1599PR-01-1-F
#CRC1599PR/platypus_nobin/CRC1599PR-01-1-E_CRC1599PR-01-0.gain.vcf.gz    CRC1599PR-01-1-L
#CRC1599PR/platypus_nobin/CRC1599PR-01-1-F_CRC1599PR-01-0.gain.vcf.gz    CRC1599PR-10-1-E
#CRC1599PR/platypus_nobin/CRC1599PR-01-1-L_CRC1599PR-01-0.gain.vcf.gz    CRC1599PR-10-1-F
#CRC1599PR/platypus_nobin/CRC1599PR-10-1-E_CRC1599PR-10-0.gain.vcf.gz    CRC1599PR-10-1-G
#CRC1599PR/platypus_nobin/CRC1599PR-10-1-F_CRC1599PR-10-0.gain.vcf.gz
#CRC1599PR/platypus_nobin/CRC1599PR-10-1-G_CRC1599PR-10-0.gain.vcf.gz

#rm {output}.tmp*
rule sign_3:
    input:  "kind_signinput3.tsv"
    output: directory("{k}_{kind}_mutpat3_denovo")
    params: tool=BIN_DIR+"/mut_pat_signatures_denovo", colors=COLORS_MODELS
    shell:
        """
            mkdir -p {output}
            {params.tool} {input} {output} '{params.colors}' {wildcards.k} mutpat.Rdata
        """

# gain all merged then pcgr, to get a MAF
#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ for f in */*/vitro.merged.vcf.gz; do tabix $f; done
rule merge_all:
    input: expand("{model}/platypus_nobin/vitro.merged.vcf.gz", model=MODELS)
    output: "all_vitro_all_merged_gained.vcf.gz"
    shell:
        """
            bcftools merge -m none --missing-to-ref {input} | bgzip > {output}
            tabix {output}
        """

rule merge_all_mss:
    input: expand("{model}/platypus_nobin/vitro.merged.vcf.gz", model=MODELS[1:])
    output: "all_vitro_mss_merged_gained.vcf.gz"
    shell:
        """
            bcftools merge -m none --missing-to-ref {input} | bgzip > {output}
            tabix {output}
        """

rule bed_all:
    input: "all_vitro_{MSS}_merged_gained.vcf.gz"
    output: "all_vitro_{MSS}_merged_gained.bed"
    shell:
        """
            zcat {input} | grep -v "^#" | bawk '{{print $1,$2-1,$2,$3}}' > {output}
        """

PCGR='/mnt/trcanmed/snaketree/prj/snakegatk/local/src/pcgr/'
rule pcgr:
    input: "all_vitro_merged_gained.vcf.gz"
    output: "pcgr/all_gained.pcgr_acmg.grch38.snvs_indels.tiers.tsv"
    params: pcgr=PCGR, assay='WGS', mdir='pcgr'
    shell:
        """
            mkdir -p {params.mdir}
            python3 {params.pcgr}/pcgr.py --pcgr_dir {params.pcgr} \
            --output_dir {params.mdir} \
            --sample_id all_gained \
            --genome_assembly grch38 \
            --conf {params.pcgr}/examples/example_COAD.toml \
            --input_vcf {input} \
            --tumor_site 9 \
            --tumor_purity 1 \
            --include_trials \
            --assay {params.assay} \
            --estimate_msi_status \
            --estimate_tmb \
            --no_vcf_validate
        """

#
#--input-vcf WD4086.vcf --output-maf WD4086.maf 
#--inhibit-vep
#--ncbi-build  GRCh38
#--ref-fasta

#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset/pcgr$ perl ~/depth/mskcc-vcf2maf-754d68a/vcf2maf.pl --input-vcf all_gained.pcgr_acmg.grch38.pass.vcf --output-maf test.maf --inhibit-vep --ncbi-build GRCh38 --ref-fasta /mnt/trcanmed/snaketree/task/annotations/dataset/gnomad/GRCh38.d1.vd1.fa
#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset/pcgr$ grep "^#" all_gained.pcgr_acmg.grch38.pass.vcf > all.vcf
#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset/pcgr$ grep -v "^#" all_gained.pcgr_acmg.grch38.pass.vcf  | bawk '{print "chr"$0}'>> all.vcf
#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset/pcgr$ perl ~/depth/mskcc-vcf2maf-754d68a/vcf2maf.pl --input-vcf all.vcf --output-maf test.maf --inhibit-vep --ncbi-build GRCh38 --ref-fasta /mnt/trcanmed/snaketree/task/annotations/dataset/gnomad/GRCh38.d1.vd1.fa


# sign input:
# 1- 24 samples, no 2nd round for technicalities right now, vitro-vivo together all children of a given t0 clone together
# 2- 15 samples, vitro-vivo separated, 2nd round included, 1 sample for each model (1 vivo 1 vitro)
# 3- 130 samples, but few muts, no 2nd round for technicalities now, each clone is 1 sample
#   
rule all_MR_ov:
    input: expand("{model}/platypus_nobin/all.MR_ov", model=MODELS)
    output: "all_MR_ov.tsv"
    shell:
        """
            cat {input} | head -n1 > {output} || 'echo ciao'
            cat {input} | grep -w -v start >> {output}
        """
        

include: "conf.sk"

# CRC0327 has a 2nd round in vivo only, so we use MODELS_NO327_2 everywhere and MODELS only for in vivo
# loss unused right now
def input_signatures(wildcards):
    import glob
    if wildcards.kind == "vitro":
        return expand("{model}/platypus_nobin_00/vitro.merged.vcf.gz", model=MODELS_NO327_2)
    elif wildcards.kind == "vivo":
        return expand("{model}/platypus_nobin_00/vivo.merged.vcf.gz", model=MODELS)
    elif wildcards.kind == "vitroloss":
        return expand("{model}/platypus_nobin_00/vitro.mergedloss.vcf.gz", model=MODELS_NO327_2)
    elif wildcards.kind == "vivoloss":
        return expand("{model}/platypus_nobin_00/vivo.mergedloss.vcf.gz", model=MODELS)
    elif wildcards.kind == "vitrovivobulk":
        return expand("{model}/platypus_nobin_00/vitro.merged.vcf.gz", model=MODELS_NO327_2) + expand("{model}/platypus_nobin_00/vivo.merged.vcf.gz", model=MODELS) + BULK_VCF
    else:
        print("wrong option, baby")

rule all_sign_input:
    input: input_signatures
    output: "signinput_{kind}_{merged}"
    run:
        import re
        with open(output[0],'w') as out:
            for vcf in input:
                crc = re.search('CRC\d{4}(LM|PR)*', vcf) # 1599 have LM/PR and we need to keep it
                sample_kind = "NA"
                sample = crc.group()
                if re.search('vitro', vcf) is not None:
                    sample_kind = 'vitroMA'
                elif re.search('vivo', vcf) is not None:
                    sample_kind = 'vivoMA'
                elif re.search('bulk', vcf) is not None: # but for other bulk we have always LMO...
                    sample_kind = 'bulk'
                    if re.search('1599', vcf) is None: # re remove LM from the un-needed samples. Very bad but at this point this seems the only way around this issue.
                        sample = sample[0:7]
                if re.search('clones_all', vcf) :
                    sample = sample + "-2nd" 
                if re.search('clones_2', vcf) :
                    continue
                annotation = sample + '_' + sample_kind
                out.write("{}\t{}".format(vcf, annotation))
                out.write("\n")
                  

rule all_sign:
    input: "signinput_vitrovivobulk_merged"
    output: heat="vitrovivobulk_heatmap_{merged}_cosmic.png", cosine="vitrovivobulk_cosine_{merged}_cosmic.png",
            heat_tsv="vitrovivobulk_heatmap_{merged}_cosmic.tsv", cosine_tsv="vitrovivobulk_cosine_{merged}_cosmic.tsv",
    params: tool=BIN_DIR+"/mut_pat_signatures_fit", colors=COLORS_MODELS_2
    log: log="vitrovivobulk_heatmap_{merged}_cosmic.png.log"
    shell:
        """
            {params.tool} {input} {output.heat} {output.cosine} '{params.colors}' {log.log} {output.heat_tsv} {output.cosine_tsv}
        """

rule count_sbs1:
    input: "signinput_vitrovivobulk_merged"
    output: heat_tsv="vitrovivobulk_SBS1.tsv",
            bartot="vitrovivobulk_plot_SBS1.svg", barperc="vitrovivobulk_plotperc_SBS1.svg"
    params: tool=BIN_DIR+"/naiveSBS1", colors=COLORS_MODELS_2
    log: log="vitrovivobulk_SBS1.tsv", Rdata="vitrovivobulk_SBS1.Rdata"
    shell:
        """
            {params.tool} {input} {output.heat_tsv} {output.bartot} '{params.colors}' {log.log} {log.Rdata} {output.barperc}
        """

# manually remove 282 clones all from signinput_vitrovivobulk_merged 22/06/23
rule msigact:
    input: "signinput_vitrovivobulk_merged"
    output: chip="msigact.png", 
            chip_tsv="msigact.tsv",
    params: tool=BIN_DIR+"/msigact", colors=COLORS_MODELS_2
    log: log="msigact.png.log"
    shell:
        """
            {params.tool} {input} {output.chip} {output.chip_tsv} '{params.colors}' {log.log}
        """ 

#### shared muts
# right now selection of files is done inside R with list.files, this is DANGEROUS, FIXME
rule shared_clone:
    output: "{hsample}.shared.png"
    params: tool=BIN_DIR+"/private_shared_gains"



#### Overall inputs and summarizing plots
# 0- dnds
# 1- all gained per Mb
# 2- MR vitro
# 3- indels gained per Mb
# 4- indels MR vitro

## inputs
# $4==1 keeps only first 6 months in vitro samples
def kind_MR(wildcards):
    print('kind MR')
    if wildcards.kind == "SNV":
        return expand("{model}/platypus_nobin_00/all.MR_ov", model=MODELS_NO327_2)
    elif wildcards.kind == "sSNV":
        return expand("{model}/mutect_nobin/all.MR_ov", model=MODELS_NO327_2)
    elif wildcards.kind == "clSNV":
        return expand("{model}/mutect_VAF/all.MR_ov", model=MODELS_NO327_2)
    elif wildcards.kind == "binSNV":
        return expand("{model}/binomial/all.MR_ov", model=MODELS_NO327_2)
    elif wildcards.kind == "indel":
        return expand("{model}/platypus_nobin_indels_00/all.MR_ov", model=MODELS_NO327_2)
    elif wildcards.kind == "mrca":
        return expand("{model}/platypus_nobin_00/all_mrca.tsv", model=MODELS_NOREP_TRUE)
    elif wildcards.kind == "subclonal":
        return expand("{model}/mutect_nobin/all_subclonal_n.tsv", model=MODELS_NO327_2)
    elif wildcards.kind == "tree":
        return expand("{model}/tree/{{lesion}}_tips.tsv", model=MODELS_1_OR_2)
    elif wildcards.kind == "firstSNV":
        return expand("{model}/platypus_nobin_00/all.MR_ov", model=MODELS_NOREP_TRUE)
    elif wildcards.kind == "univMutect":
        return expand("{model}/univMutect/all.MR_ov", model=MODELS_NO327_2)
    else: 
        print("boh!")

# == 0 for MR_univ PORCOPORCOPORCOPORCO
            #cat {input} | bawk '$4==0 {{print $3,$8}}' > {output}
rule overall_MR_edu_vitro:
    output: "MR_edu_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | bawk '$4==1 || $4 == 2 {{print $2,$8}}' > {output}
        """
    
rule overall_MR_conte_vitro:
    output: "MR_conte_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | bawk '$4==1 || $4 == 2 {{print $2,$7}}' > {output}
        """



rule check_noplaty:
    input: 'CRC1307_clones_all/mutect_nobin/all.MR_ov', 'CRC1307/mutect_nobin/all.MR_ov', 'CRC1502_clones_all/mutect_nobin/all.MR_ov', 'CRC1502/mutect_nobin/all.MR_ov'
    output: "check_MR_noplaty_MR_edu_SNV"
    shell:
        """
            cat {input} | bawk '$4==1 || $4 == 2 {{print $2,$8}}' > {output}
        """

rule check_noplaty_plot:
    input: r1="MR_edu_SNV", r2="check_MR_noplaty_MR_edu_SNV", ggtheme=GGTHEME
    output: plot="platy_vs_noplaty.pdf", stats="platy_vs_noplaty.log"
    params: name="platy_vs_noplaty", tool=BIN_DIR+"/check_plot", colors=MANY_COLORS_PALETTE
    shell: "{params.tool} {input.r1} {input.r2} {params.name} {params.colors} {input.ggtheme}" 


rule check_coverage:
    input: 'CRC1307_clones_all/platypus_nobin_20x/all.MR_ov', 'CRC1307/platypus_nobin_20x/all.MR_ov', 'CRC1502_clones_all/platypus_nobin_20x/all.MR_ov', 'CRC1502/platypus_nobin_20x/all.MR_ov'
    output: "check_MR_coverage_MR_edu_SNV"
    shell:
        """
            cat {input} | bawk '$4==1 || $4 == 2 {{print $2,$8}}' > {output}
        """

rule check_coverage_plot:
    input: r1="MR_edu_SNV", r2="check_MR_coverage_MR_edu_SNV", ggtheme=GGTHEME
    output: plot="cov1x_vs_cov20x.pdf", stats="cov1x_vs_cov20x.log"
    params: name="cov1x_vs_cov20x", tool=BIN_DIR+"/check_plot", colors=MANY_COLORS_PALETTE
    shell: "{params.tool} {input.r1} {input.r2} {params.name} {params.colors} {input.ggtheme}" 


rule overall_len:
    input: kind_MR
    output: "all_len_{kind}.tsv"
    shell:
        """
            cat {input} | bawk '$4==1 || $4 == 2 {{print $2,$6}}' > {output}
        """

rule overall_len_univMutect:
    input: kind_MR
    output: "all_len_{kind}.tsv"
    shell:
        """
            cat {input} | bawk '$4==1 || $4 == 2 {{print $2,$6}}' > {output}
        """

ruleorder: overall_len > overall_len_univMutect

rule overall_mrca:
    input: kind_MR
    output: "shared_{kind}"
    shell:
        """
            cat {input} | grep -v clone_other  | grep -v '\-M' | bawk '{{print $2"_"$3,$4}}' > {output}
        """

rule overall_subcl:
    input: kind_MR
    output: "fixedthr_{kind}"
    shell:
        """
            cat {input} | grep -v '\-M' |  bawk '$3==0.24 && $4==0.12 {{print $1,$2}}' | tr "." "\\t" | cut -f 1,6 > {output}
        """

rule mrca_plot:
    input: "shared_mrca"
    output: "mrca.png"
    params: tool=BIN_DIR+"/generic_clones_plot", colors=MANY_COLORS_PALETTE
    shell:
        """
            {params.tool} {input} {output} {params.colors} MRCA_gen
        """


rule overall_SNV_gained_norm:
    output: "vitro_gained_norm_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | bawk '$4==1 || $4==2 {{print $2,$5/$6}}' > {output}
        """

rule overall_SNV_gained_norm_vivo:
    output: "vivo_gained_norm_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | bawk '$4!=1 && $4!=2 && $4!="class"{{print $2,$5/$6}}' > {output}
        """

rule overall_MR_len_vivo:
    output: "vivo_MR_len_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | bawk '$4!=1 && $4!=2 && $4!="class"{{print $2,$5,$6}}' > {output}
        """
        
rule overall_SNV_gained:
    output: "vitro_gained_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | bawk '$4==1 || $4==2 {{print $2,$5}}' > {output}
        """
        
rule overall_SNV_gained_T1:
    output: "vitro_T1gained_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | bawk '$4==1 {{print $2,$5}}' > {output}
        """

rule overall_SNV_gained_vivo:
    output: "vivo_gained_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | bawk '$4!=1 && $4 != 2 && $4!="class"{{print $2,$5}}' > {output}
        """

rule overall_tree_tips:
    output: "tree_{lesion}_{kind}"
    input: kind_MR
    shell:
        """
            cat {input} | grep -w -v from | cut -f1,3 > {output}
        """

rule rename_removefiltered_cn:
    input: "tree_cn_tree"
    output: "fixedcn_tree"
    shell:  
        """
            grep -v -w 'CRC0282-01A-2-3' {input} | grep -v -w 'CRC0282-07E-2-2' | \
            sed 's/CRC1307-08D-2-4/CRC1307-09E-2-4/' {input} | sed 's/CRC1307-08D-2-3/CRC1307-09E-2-3/' | \
            sed 's/CRC1307-08D-2-5/CRC1307-09E-2-5/' | sed 's/CRC1307-02B-2-2/CRC1307-08D-2-2/' | sed 's/CRC1307-02B-2-5/CRC1307-08D-2-5/' > {output}
        """

# for consistency with CN we build also snvindel tree with the two filtered MSI 2nd round and remove them afterwards
rule rename_removefiltered_snvindel:
    input: "tree_snvindel_tree"
    output: "fixedsnvindel_tree"
    shell:  
        """
            grep -v -w 'CRC0282-01A-2-3' {input} | grep -v -w 'CRC0282-07E-2-2'  > {output}
        """

rule average_model:
    input: '{any}'
    output: '{any}_averaged.tsv'
    params: tool=BIN_DIR+'/average_model'
    shell:
        """
            {params.tool} {input} {output}
        """

rule correlation_subcl_mr:
    input: x='MR_edu_SNV_averaged.tsv', y='fixedthr_subclonal_averaged.tsv'
    output: 'MR_SNV_subcl.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove="CRC0282", palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean MR_SNV n_subclonal no
        """

rule correlation_snv_indel:
    input: x='MR_edu_SNV_averaged.tsv', y='MR_edu_indel_averaged.tsv'
    output: 'MR_SNV_indel.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove="CRC0282", palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean MR_SNV MR_indel yes
        """

rule correlation_snv_indel_n:
    input: x='vitro_gained_norm_SNV_averaged.tsv', y='vitro_gained_norm_indel_averaged.tsv'
    output: 'gainednorm_SNV_indel.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove="CRC0282", palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean gainedMB_SNV gainedMB_indel no
        """

rule correlation_snv_indel_nn:
    input: x='vitro_gained_SNV_averaged.tsv', y='vitro_gained_indel_averaged.tsv'
    output: 'gained_SNV_indel.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove="CRC0282", palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean gained_SNV gained_indel no
        """


rule correlation_snv_bulkburden:
    input: x='MR_edu_SNV_averaged.tsv', y=PRJ_ROOT+'/local/share/data/bulkburdens_snv'
    output: 'bulkburden_SNV.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove='CRC0282', palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean MR_SNV bulk_burden no
        """

rule correlation_indel_bulkburden:
    input: x='MR_edu_indel_averaged.tsv', y=PRJ_ROOT+'/local/share/data/bulkburdens_indel'
    output: 'bulkburden_indel.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove='CRC0282', palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean MR_indel bulk_burden no
        """

rule correlation_vitrovivo:
    input: x='vitro_gained_norm_{kind}_averaged.tsv', y='vivo_gained_norm_{kind}_averaged.tsv'
    output: 'gainednorm_vivo_{kind}.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove="CRC0282", palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean gainedMB_{wildcards.kind}_vitro gainedMB_{wildcards.kind}_vivo no
        """

rule correlation_vitrovivo_msi:
    input: x='vitro_gained_norm_{kind}_averaged.tsv', y='vivo_gained_norm_{kind}_averaged.tsv'
    output: 'gainednorm_vivoall_{kind}.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove="plh", palette=COLORS_MODELS_2
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean gainedMB_{wildcards.kind}_vitro gainedMB_{wildcards.kind}_vivo no
        """


rule correlation_vitrovivo_nn:
    input: x='vitro_gained_{kind}_averaged.tsv', y='vivo_gained_{kind}_averaged.tsv'
    output: 'gained_vivo_{kind}.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove="CRC0282", palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean gained_{wildcards.kind}_vitro gained_{wildcards.kind}_vivo no
        """

### all dnds
rule all_dnds:
    input: expand("{model}/platypus_nobin_00/all_gained_named.tsv", model=MODELS)
    output: "dnds.tsv", "dnds.Rdata"
    log: "dnds.log"
    params:  tool=BIN_DIR+"/dnds", rda=DNDSCV_RDA
    shell:
        """
            cat {input} | tr ":" "\\t" | bawk '{{print "all",$2,$3,$4,$5}}' | sort | uniq > {output[0]}.tmp
            {params.tool} {output[0]}.tmp {output} {params.rda} &> {log}
            rm {output[0]}.tmp
        """
 
rule all_dnds_vitroMSS:
    input: expand("{model}/platypus_nobin_00/all_gained_named.tsv", model=MODELS[1:])
    output: "dnds_vitroMSS.tsv", "dnds_vitroMSS.Rdata"
    log: "dnds_vitroMSS.log"
    params:  tool=BIN_DIR+"/dnds", rda=DNDSCV_RDA
    shell:
        """
            cat {input} | tr ":" "\\t" | bawk '$1 !~ /-M/ {{print "all",$2,$3,$4,$5}}' | sort | uniq > {output[0]}.tmp
            {params.tool} {output[0]}.tmp {output} {params.rda} &> {log}
            rm {output[0]}.tmp
        """

# Rdata will be overwritten every time
rule dnds_overall_t0_t1_R2:
    input: expand("{model}/platypus_nobin_00/all_gained_named.tsv", model=MODELS)
    output: "dnds_overall_vitro_R2.tsv", "dnds_overall_vitro_R2.Rdata"
    log: "dnds_overall_vitro_R2.log"
    params:  tool=BIN_DIR+"/dnds", rda=DNDSCV_RDA, models=MODELS_NOREP_TRUE
    shell:
        """
            for n in {params.models}; do \\
                cat ${{n}}*/platypus_nobin_00/all_gained_named.tsv | tr ":" "\\t" | bawk -v name=$n '$1 !~ /-M/ {{print name,$2,$3,$4,$5}}' | sort | uniq > {output[0]}.tmp; \\
                {params.tool} {output[0]}.tmp {output[0]}_${{n}}.tmp {output[1]} {params.rda}; \\
                bawk -v name=$n 'NR!=1{{print name, $0}}' < {output[0]}_${{n}}.tmp; \\
            done > {output[0]}
        """

rule dnds_plot_R2:
    input: "dnds_overall_vitro_R2.tsv"
    output: "dnds_overall_vitro_R2.png"
    params: tool=BIN_DIR+"/dnds_plot_overall", colors=COLORS_MODELS_2
    shell:
        """ 
            grep wall {input} | cut -f1,4,5,6 > {output}.tmp
            {params.tool} {output}.tmp {output} '{params.colors}' {output}.Rimage
            rm {output}.tmp
        """


rule dnds_vitro:
    input: expand("{model}/platypus_nobin_00/all_gained_named.tsv", model=MODELS)
    output: "dnds_vitro.tsv", "dnds_vitro.Rdata"
    log: "dnds_vitro.log"
    params:  tool=BIN_DIR+"/dnds", rda=DNDSCV_RDA
    shell:
        """
            cat {input} | tr ":" "\\t" | bawk '$1 !~ /M/ {{print "all",$2,$3,$4,$5}}' | sort | uniq > {output[0]}.tmp
            {params.tool} {output[0]}.tmp {output} {params.rda} &> {log}
            rm {output[0]}.tmp
        """

rule dnds_overall:
    input: expand("{model}/platypus_nobin_00/dnds.tsv", model=MODELS)
    output: "dnds_overall.tsv"
    shell:
        """
          for f in {input}; do \\
            n=$(echo $f | tr "\/" "\\t" | cut -f 1); \\
            bawk -v name=$n '$1=="wall"{{print name,$3,$4,$5}}' $f; \\
          done > {output}
        """

rule dnds_voverall:
    input: expand("{model}/platypus_nobin_00/dndsvitro.tsv", model=MODELS)
    output: "dndsvitro_overall.tsv"
    shell:
        """
          for f in {input}; do \\
            n=$(echo $f | tr "\/" "\\t" | cut -f 1); \\
            bawk -v name=$n '$1=="wall"{{print name,$3,$4,$5}}' $f; \\
          done | sed 's/clones_all/2nd/i'> {output}
        """

rule dnds_1voverall:
    input: expand("{model}/platypus_nobin_00/dndsvitro.tsv", model=MODELS_NOREP_TRUE)
    output: "dnds1vitro_overall.tsv"
    shell:
        """
          for f in {input}; do \\
            n=$(echo $f | tr "\/" "\\t" | cut -f 1); \\
            bawk -v name=$n '$1=="wall"{{print name,$3,$4,$5}}' $f; \\
          done | sed 's/clones_all/2nd/i'> {output}
        """

rule dnds_T2voverall:
    input: expand("{model}/platypus_nobin_00/dndsvitro.tsv", model=MODELS_T2)
    output: "dnds_t2_vitro_overall.tsv"
    shell:
        """
          for f in {input}; do \\
            n=$(echo $f | tr "\/" "\\t" | cut -f 1); \\
            bawk -v name=$n '$1=="wall"{{print name,$3,$4,$5}}' $f; \\
          done | sed 's/clones_all/2nd/i'> {output}
        """

rule dndsdouble_1voverall:
    input: expand("{model}/platypus_nobin_indels_00/dnds_double_vitro.tsv", model=MODELS_NOREP_TRUE)
    output: "dnds1vitrodouble_overall.tsv"
    shell:
        """
          for f in {input}; do \\
            n=$(echo $f | tr "\/" "\\t" | cut -f 1); \\
            bawk -v name=$n '$1=="wall"{{print name,$3,$4,$5}}' $f; \\
          done | sed 's/clones_all/2nd/i'> {output}
        """

## plots
# single plots are from all_gained_named.tsv with also in vivo so we will keep it here
rule dnds_global:
    input: "{dndskind}_overall.tsv"
    output: "{dndskind}_overall.png"
    params: tool=BIN_DIR+"/dnds_plot_overall", colors=COLORS_MODELS_2 # this is not general needs to change for dndsvitro 1 vitro
    shell:
        """
            {params.tool} {input} {output} '{params.colors}' {output}.Rimage
        """

rule dnds_plot_MSIMSS:
    input: msi="CRC0282/platypus_nobin_00/dndsvitro.tsv", mss="dnds_vitroMSS.tsv"
    output: "dnds_MSIMSS.png"
    params: tool=BIN_DIR+"/dnds_plot_all", colors='#cc3300,#6666ff'
    shell:
        """
            {params.tool} {input} {output} '{params.colors}'
        """

rule dnds_onebyone: # TODO
    input: expand("{model}/platypus_nobin_00/dnds.tsv", model=MODELS)
    output: "dnds_onebyone.png"
    params: tool=BIN_DIR+"/dnds_plot_onebyone"
    shell:
        """
            {params.tool} {input} {output}
        """

rule MRedu_plot:
    input: data="MR_edu_{kind}", ggtheme=GGTHEME
    output: "MR_edu_{kind}.png"
    params: tool=BIN_DIR+"/MR_plot", colors=MANY_COLORS_PALETTE
    shell:
        """
            {params.tool} {input.data} {output} {params.colors} {input.ggtheme}
        """


rule MRconte_plot:
    input: data="MR_conte_{kind}", ggtheme=GGTHEME
    output: "MR_conte_{kind}.png"
    params: tool=BIN_DIR+"/MR_plot", colors=MANY_COLORS_PALETTE
    shell:
        """
            {params.tool} {input.data} {output} {params.colors} {input.ggtheme}
        """

wildcard_constraints:
    kind="[a-zA-Z]+"

rule gained_plot:
    input: "{vivi}_gained_norm_{kind}"
    output: "{vivi}_gained_norm_{kind}.png"
    params: tool=BIN_DIR+"/gained_plot", colors=MANY_COLORS_PALETTE
    shell:
        """
            {params.tool} {input} {output} {params.colors} {wildcards.vivi} norm
        """

rule gained_nn_plot:
    input: "{vivi}_gained_{kind}"
    output: "{vivi}_gained_{kind}.png"
    params: tool=BIN_DIR+"/gained_plot", colors=MANY_COLORS_PALETTE
    shell:
        """
            {params.tool} {input} {output} {params.colors} {wildcards.vivi} nonorm
        """
        
### quick and dirty remove 282
rule MSS_MR_edu_plot:
    input: data="MR_edu_{kind}", ggtheme=GGTHEME
    output: "MSSMR_edu_{kind}.png"
    params: tool=BIN_DIR+"/MR_plot", colors=MANY_COLORS_PALETTE
    shell:
        """
            grep -v CRC0282 {input.data} > {output}.tmp
            {params.tool} {output}.tmp {output} {params.colors} {input.ggtheme}
            rm {output}.tmp
        """

rule MSS_gained_plot:
    input: "{vivi}_gained_norm_{kind}"
    output: "{vivi}_gainedMSS_norm_{kind}.png"
    params: tool=BIN_DIR+"/gained_plot", colors=MANY_COLORS_PALETTE #lambda w: MSS_MANY_COLORS_MODELS_VITRO if w.vivi == "vitro" else MSS_MANY_COLORS_MODELS_VIVO
    shell:
        """
            grep -v CRC0282 {input} > {output}.tmp
            {params.tool} {output}.tmp {output} {params.colors} {wildcards.vivi} norm
            rm {output}.tmp
        """

rule MSS_gainednn_plot:
    input: "{vivi}_gained_{kind}"
    output: "{vivi}_gainedMSS_{kind}.png"
    params: tool=BIN_DIR+"/gained_plot", colors=MANY_COLORS_PALETTE#lambda w: MSS_MANY_COLORS_MODELS_VITRO if w.vivi == "vitro" else MSS_MANY_COLORS_MODELS_VIVO
    shell:
        """
            grep -v CRC0282 {input} > {output}.tmp
            {params.tool} {output}.tmp {output} '{params.colors}' {wildcards.vivi} nonorm
            rm {output}.tmp
        """

rule tree_plot:
    input: data="{lesion}_tree", ggtheme=GGTHEME
    output: "treedist_{lesion}.png"
    params: tool=BIN_DIR+"/MR_plot", colors=MANY_COLORS_PALETTE
    shell:
        """
            {params.tool} {input.data} {output} {params.colors} {input.ggtheme}
        """

### MutationalPatterns bed
#rule chain:
#    output: "chain.gz"
#    shell: "wget -O {output} http://hgdownload.cse.ucsc.edu/goldenpath/hg19/liftOver/hg19ToHg38.over.chain.gz"


#wildcard_constraints:
#    which="[\w\d_.]+"   

#rule bed:
#    input: bed=BED+"/{which}.bed", chain="chain.gz"
#    output: bed="{which}.bed", miss="{which}.miss"
#    shell:
#        """
#            liftOver <(bawk '{{print "chr"$1,$2,$3}}' {input.bed}) {input.chain} {output.bed} {output.miss}
#        """


### QC #  TODO
#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ for f in  */platypus_nobin/*ovcnokdelta.tsv.gz; do g=$(zcat $f | grep -c gain); l=$(zcat $f | grep -c loss); echo -e "$f\t$g\t$l"; done > gain_loss.snv
#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ for f in  */platypus_nobin_indels/*ovcnokdelta.tsv.gz; do g=$(zcat $f | grep -c gain); l=$(zcat $f | grep -c loss); echo -e "$f\t$g\t$l"; done > gain_loss.indel

### segments
#grassi@godot:/scratch/trcanmed/AF_spectra/dataset$ cat CRC*/platypus_nobin/all_seg_changes.txt > pippo_all_segments_changes.txt


#### gained non syn muts
# Do we keep or remove in vivo? Only in vitro!
def all_nonsyn(wildcards):
    if wildcards.kind == "SNV":
        return expand("{model}/platypus_nobin_00/nonsyn.binary.tsv.gz", model=MODELS_NOREP_TRUE)
    elif wildcards.kind == "indel":
        return expand("{model}/platypus_nobin_indels_00/nonsyn.binary.tsv.gz", model=MODELS_NOREP_TRUE_NOMSI)
    elif wildcards.kind == "bulk":
        return expand("{model}/tree/bulk.nonsyn.binary.tsv.gz", model=MODELS_NOREP_TRUE)
    else:
        print('Boh in expansion for nonsyn binary')

rule merge_binary_nonsyn:
    output: res="{kind}_nonsyn.binary.tsv.gz"
    input: all_nonsyn
    run:
        import pandas as pd
        d = pd.read_table(input.pop(0), sep='\t', compression="gzip", index_col=0, header=0)
        d = d[~ d.index.str.contains('-M')]
        d = d.loc[:, (d != 0).any(axis=0)]
        if d.shape[1] == 0:
            d = pd.DataFrame()
        for i in input:
            x = pd.read_table(i, sep='\t', compression="gzip", index_col=0, header=0)
            if x.shape[1] != 0:
                #x = x[x.sample.str.contains('-M')]
                x = x[~ x.index.str.contains('-M')]
                x = x.loc[:, (x != 0).any(axis=0)]
                d = d.append(x, sort=True).fillna(0)
        d.to_csv(output.res, sep='\t', index=True, compression='gzip')


rule gene_onco:
    input: d="{kind}_nonsyn.binary.tsv.gz", filter=PRJ_ROOT+"/local/share/data/intogen_symbols"
    output: "{kind}_onco_nonsyn.tsv"
    shell:
        """
            zcat {input.d} | bawk 'NR==1' | tr "\\t" "\\n" | tr ";" "\\n" | filter_1col 1 {input.filter} > {output}
        """

rule gene_oncog:
    input: d="{kind}_nonsyn.binary.tsv.gz", filter=PRJ_ROOT+"/local/share/data/oncog"
    output: "{kind}_oncog_nonsyn.tsv"
    shell:
        """
            zcat {input.d} | bawk 'NR==1' | tr "\\t" "\\n" | tr ";" "\\n" | filter_1col 1 {input.filter}  | sort | uniq > {output}
        """

rule gene_tsg:
    input: d="{kind}_nonsyn.binary.tsv.gz", filter=PRJ_ROOT+"/local/share/data/tsb"
    output: "{kind}_tsg_nonsyn.tsv"
    shell:
        """
            zcat {input.d} | bawk 'NR==1' | tr "\\t" "\\n" | tr ";" "\\n" | filter_1col 1 {input.filter}  | sort | uniq > {output}
        """

CMODELS_NOREP=['CRC0282','CRC0327','CRC0441','CRC1078','CRC1307','CRC1307_clones_all','CRC1502','CRC1502_clones_all','CRC1599LM']
# 1599PR has no cosmic muts, bad fix for now
def all_cosmic(wildcards):
    if wildcards.kind == "SNV":
        return expand("{model}/platypus_nobin_00/cosmic.binary.tsv.gz", model=CMODELS_NOREP)
    else:
        return expand("{model}/platypus_nobin_indels_00/cosmic.binary.tsv.gz", model=CMODELS_NOREP)

rule merge_binary_cosmic:
    output: res="{kind}_cosmic.binary.tsv.gz"
    input: all_cosmic
    run:
        import pandas as pd
        d = pd.read_table(input.pop(0), sep='\t', compression="gzip", index_col=0, header=0)
        d = d[~ d.index.str.contains('-M')]
        d = d.loc[:, (d != 0).any(axis=0)]
        for i in input:
            x = pd.read_table(i, sep='\t', compression="gzip", index_col=0, header=0)
            x = x[~ x.index.str.contains('-M')]
            x = x.loc[:, (x != 0).any(axis=0)]
            d = d.append(x, sort=True).fillna(0)
        d.to_csv(output.res, sep='\t', index=True, compression='gzip')



#cut -f13,14 /mnt/trcanmed/snaketree/task/variant_annotations/dataset/annovar/hg38/humandb/hg38_refGene.txt  |grep cmpl | sort | uniq | filter_1col 1 ../local/share/data/intogen_symbols | wc -l
#566

#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ cut -f13,14 /mnt/trcanmed/snaketree/task/variant_annotations/dataset/annovar/hg38/humandb/hg38_refGene.txt  |grep cmpl | sort | uniq | filter_1col 1 ../local/share/data/common_iorio_crisp_essential | wc -l
#956

#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ cut -f13,14 /mnt/trcanmed/snaketree/task/variant_annotations/dataset/annovar/hg38/humandb/hg38_refGene.txt  |grep cmpl | sort | uniq | wc -l
#19561

#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ cut -f13,14 /mnt/trcanmed/snaketree/task/variant_annotations/dataset/annovar/hg38/humandb/hg38_refGene.txt  |grep -w cmpl | sort | uniq | wc -l
#19462
rule gene_essential:
    input: d="{kind}_nonsyn.binary.tsv.gz", filter=PRJ_ROOT+"/local/share/data/common_iorio_crisp_essential"
    output: "{kind}_essential_nonsyn.tsv"
    shell:
        """
            zcat {input.d} | bawk 'NR==1' | tr "\\t" "\\n" | tr ";" "\\n" | filter_1col 1 {input.filter} | sort | uniq > {output}
        """

rule all_gene:
    input: d="{kind}_nonsyn.binary.tsv.gz"
    output: "{kind}_nonsyn.tsv"
    shell:
        """
            zcat {input.d} | bawk 'NR==1' | tr "\\t" "\\n" | tr ";" "\\n" | grep -v sample | sort | uniq > {output}
        """

rule universe:
    input: annovar='/mnt/trcanmed/snaketree/task/variant_annotations/dataset/annovar/hg38/humandb/hg38_refGene.txt'
    output: "nonsyn_universe.tsv"
    shell:
        """
            cut -f13,14 {input.annovar}  | grep -w cmpl | cut -f1 | sort | uniq > {output}
        """

# essenziali che non sono nell'universo vanno non considerati (non sto a cercare la lista di testati di Iorio)
rule universe_essential:
    input: u="nonsyn_universe.tsv", filter=PRJ_ROOT+"/local/share/data/common_iorio_crisp_essential"    
    output: "nonsyn_universe_essential.tsv"
    shell: "filter_1col 1 {input.u} < {input.filter} > {output}"

rule universe_oncog:
    input: u="nonsyn_universe.tsv", filter=PRJ_ROOT+"/local/share/data/oncog"
    output: "nonsyn_universe_oncog.tsv"
    shell: "filter_1col 1 {input.u} < {input.filter} > {output}"

rule universe_tsg:
    input: u="nonsyn_universe.tsv", filter=PRJ_ROOT+"/local/share/data/tsb"
    output: "nonsyn_universe_tsg.tsv"
    shell: "filter_1col 1 {input.u} < {input.filter} > {output}"

rule essential_or_onco_n:
    input: tot_gained="{kind}_nonsyn.tsv", gained_essential="{kind}_{gclass}_nonsyn.tsv", universe="nonsyn_universe.tsv",
            ess="nonsyn_universe_{gclass}.tsv"
    output: "{kind}_{gclass}_n.tsv"
    shell: 
        """
            echo -e "n_univ\\tn_gainedess\\tn_gained\\tn_ess\\tn_gainedess2\\tn_gained2" > {output}
            cat {input.universe} | wc -l >> {output}
            filter_1col 1 {input.universe} < {input.gained_essential} | wc -l >> {output}
            filter_1col 1 {input.universe} < {input.tot_gained} | wc -l >> {output}
            filter_1col 1 {input.universe} < {input.ess} | wc -l >> {output}
            cat {input.gained_essential} | wc -l >> {output}
            cat {input.tot_gained} | wc -l >> {output}

        """

rule essential_phyper:
    input: "{kind}_{gclass}_n.tsv"
    output: "{kind}_{gclass}_phyper.txt"
    shell:
        """
            Rscript -e "d <- read.table('{input[0]}', header=T, fill=T); d2 <- data.frame(row.names=colnames(d), n=d[,1]); 
                        print(d2[2,1]==d2[5,1]); print(d2[3,1]==d2[6,1]); 
                        print(phyper(d2[2,1]-1, d2[4,1], d2[1,1]-d2[4,1], d2[3,1], lower.tail=FALSE));" \\
                > {output}
        """

rule essential_phyper_both:
    input: "SNV_{gclass}_n.tsv", "indel_{gclass}_n.tsv"
    output: "both{gclass}_phyper.txt"
    shell:
        """
            Rscript -e "d <- read.table('{input[0]}', header=T, fill=T); d2 <- data.frame(row.names=colnames(d), n=d[,1]);
                        di <- read.table('{input[1]}', header=T, fill=T); d3 <- data.frame(row.names=colnames(di), n=di[,1]); d2[2,1] <- d2[2,1]+d3[2,1]; d2[3,1] <- d2[3,1]+d3[3,1];
                        print(phyper(d2[2,1]-1, d2[4,1], d2[1,1]-d2[4,1], d2[3,1], lower.tail=FALSE));" \\
                        > {output}
        """

# TODO put in rule
#d <- read.table('SNV_essential_n.tsv', sep="\t", header=T, fill=T)
#d2 <- data.frame(row.names=colnames(d), n=d[,1])
# d2[2,1]==d2[5,1]
# d2[3,1]==d2[6,1]
#phyper(d2[2,1]-1, d2[4,1], d2[1,1]-d2[4,1], d2[3,1], lower.tail=FALSE)

rule vi_merge_binary_nonsyn:
    output: res="{kind}_vinonsyn.binary.tsv.gz"
    input: all_nonsyn
    run:
        import pandas as pd
        d = pd.read_table(input.pop(0), sep='\t', compression="gzip", index_col=0, header=0)
        d = d.loc[:, (d != 0).any(axis=0)]
        for i in input:
            x = pd.read_table(i, sep='\t', compression="gzip", index_col=0, header=0)
            x = x.loc[:, (x != 0).any(axis=0)]
            d = d.append(x, sort=True).fillna(0)
        d.to_csv(output.res, sep='\t', index=True, compression='gzip')

# egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ zcat */platypus_nobin/all.annovar.gz |  cut -f 1  | wc -l
# 838624
# egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ zcat */platypus_nobin/all.annovar.gz |  cut -f 1  | grep -v '\-M' | wc -l
# 681758

#data@rotpunkt:~/work/def_targeted_sanger672_iorio/cn_drivers$ sed 1d  IntOGen_Compendium_Cancer_Genes_19062020.txt  | bawk '$4=="COREAD"{print $1,$10}' | sort |uniq > intogen_crc/all
rule gene_crc_onco_crc:
    input: d="{kind}_nonsyn.binary.tsv.gz", filter=PRJ_ROOT+"/local/share/data/intogen_crc"
    output: "{kind}_oncocrc_nonsyn.tsv"
    shell:
        """
            zcat {input.d} | bawk 'NR==1' | tr "\\t" "\\n" | tr ";" "\\n" | translate -k -a {input.filter} 1 > {output}
        """

# is cmpl the right filter for annovar TODO
# seems so...should use -w to remove incmpl
#https://www.biostars.org/p/152555/
rule n_crc:
    input: genes=PRJ_ROOT+"/local/share/data/intogen_crc", annovar='/mnt/trcanmed/snaketree/task/variant_annotations/dataset/annovar/hg38/humandb/hg38_refGene.txt' 
    output: "crc_n"
    shell:
        """
            cut -f13,14 {input.annovar}  |grep -w cmpl | sort | uniq | filter_1col 1 <(cut -f 1 {input.genes}) | wc -l | bawk '{{print "all",$0}}'> {output}
            cut -f13,14 {input.annovar}  |grep -w cmpl | sort | uniq | filter_1col 1 <(bawk '$2=="LoF"{{print $1}}' {input.genes}) | wc -l | bawk '{{print "tsg",$0}}' >> {output}
            cut -f13,14 {input.annovar}  |grep -w cmpl | sort | uniq | filter_1col 1 <(bawk '$2=="Act"{{print $1}}' {input.genes}) | wc -l | bawk '{{print "oncog",$0}}' >> {output}
        """

### n. of common muts in t0 clones

rule all_neutralQ:
    input: expand("{model}/tree/0_common.matrix.tsv.gz", model=MODELS_NOREP_TRUE)
    output: "neutralQ.tsv"
    shell:
        """
            echo -e "model\\tmean" > {output}
            for f in {input}; do
                echo -en "$f\\t" | tr "\/" "\\t" | cut -f 1 | tr "\\n" "\\t"  >> {output}
                zcat $f | sed 1d | wc -l >> {output}
            done;
        """


rule correlation_snv_neutralqburden:
    input: x='MR_edu_SNV_averaged.tsv', y='neutralQ.tsv'
    output: 'neutralqburden_SNV.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove='CRC0282', palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean MR_SNV bulk_burden no
        """

# rule correlation_indel_neutralqburden:
#     input: x='MR_edu_indel_averaged.tsv', y=PRJ_ROOT+'/local/share/data/bulkburdens_indel'
#     output: 'neutralqburden_indel.pdf'
#     params: tool=BIN_DIR+'/corrplot', toremove='plh', palette=COLORS_MODELS_2
#     shell:
#         """
#             {params.tool} {params.toremove} '{params.palette}' {input} {output} mean MR_indel bulk_burden no
#         """


### bulk annovar
def find_bulk(wildcards):
    regex = '.+'+wildcards.b+'.+'
    res = [x for x in BULK_VCF if re.match(regex, x)]
    if len(res) == 1:
        return res[0]
    else:
        print("Something murky in bulk!")
        print(res)
        print(wildcards.b)
        print(BULK_VCF)


rule annovar:
    input: find_bulk, ANNOVAR
    output: "{b}.multianno.txt"
    log: "{b}.multianno.log"
    params: ver="hg38"
    shell:
        """
        table_annovar.pl {input[0]} {input[1]} --otherinfo -buildver {params.ver} -out merged -remove -protocol refGene,avsnp150,cosmic87_coding -vcfinput -operation g,f,f -nastring . -polish &> {log}
        bawk '{{print "{wildcards.b}", $0}}' < merged.hg38_multianno.txt > {output}
        rm merged.hg38_multianno.txt
        """

rule all_all_annovar:
    input: expand("{b}.multianno.txt", b=MODELS_NOREP_TRUE[:-1])
    output: "all.annovar.gz"
    shell: "cat {input} | sed 1d | gzip >  {output}"
    

rule binary_nonsyn:
    input: data="all.annovar.gz", wanted=PRJ_ROOT+"/local/share/data/nonsyn"
    output: res="nonsyn.binary.tsv.gz"
    run:
        import pandas as pd
        d = pd.read_table(input.data, sep='\t', index_col=None, header=None)
        wanted = pd.read_table(input.wanted, sep='\t', index_col=None, header=None)
        #df.drop(df.columns[[1, 2]], axis=1, inplace=True)
        d = d.iloc[:, [0,7,9,25]]  #also AF info
        d.columns = ['sample','gene','class','info']
        wanted.columns = ['class']
        d = d[d['class'].isin(wanted['class'])]
        d.drop(columns=['class'], inplace=True)
        d['afs'] = [x.split(':')[2] for x in  d['info'].values]
        d.drop(columns=['info'], inplace=True)
        #pi = d.pivot(index="sample", columns="gene", values="value") # cumbersome cmq
        pi = pd.pivot_table(d, index=['sample'], columns='gene', aggfunc=lambda x: max(x), fill_value=0)
        pi.columns = pi.columns.droplevel()
        pi.transpose().to_csv(output.res, sep='\t', index=True, compression='gzip')


### growth rates
rule average_model_birth:
    input: B
    output: 'birth_averaged.tsv'
    params: tool=BIN_DIR+'/average_model'
    shell:
        """
            {params.tool} {input} {output}
        """

rule correlation_snv_birthrate:
    input: x='MR_edu_{mut}_averaged.tsv', y='birth_averaged.tsv'
    output: 'birth_{mut}.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove='CRC0282', palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean MR_{wildcards.mut} birth_rate no
        """


rule average_model_bdeath:
    input: B_D
    output: 'birthdeath_averaged.tsv'
    params: tool=BIN_DIR+'/average_model'
    shell:
        """
            {params.tool} {input} {output}
        """

rule correlation_snv_bdeathrate:
    input: x='MR_edu_{mut}_averaged.tsv', y='birthdeath_averaged.tsv'
    output: 'birthdeath_{mut}.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove='CRC0282', palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean MR_{wildcards.mut} birthdeath_rate no
        """

rule birth_plot:
    input: B
    output: "birth_clones.png"
    params: tool=BIN_DIR+"/generic_clones_plot", colors=MANY_COLORS_PALETTE
    shell:
        """
            {params.tool} {input} {output} {params.colors} birth
        """


rule birth_plot_TEMP:
    input: PRJ_ROOT+'/local/share/data/bdTEMP.txt'
    output: "birth_TEMP.png"
    params: tool=BIN_DIR+"/generic_clones_plot", colors=MANY_COLORS_PALETTE
    shell:
        """
            {params.tool} {input} {output} {params.colors} birth
        """

rule correlation_snvn_birthrate:
    input: x='vitro_{gained}_{mut}_averaged.tsv', y='birth_averaged.tsv'
    output: 'birth_{gained}_{mut}.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove='CRC0282', palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean {wildcards.gained}_{wildcards.mut} birth_rate no
        """

rule correlation_snvn_bdeathrate:
    input: x='vitro_{gained}_{mut}_averaged.tsv', y='birthdeath_averaged.tsv'
    output: 'birthdeath_{gained}_{mut}.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove='CRC0282', palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean {wildcards.gained}_{wildcards.mut} birthdeath_rate no
        """

### quick and dirty correlation between n. of subclonal and MR
def kind_subclonal(wildcards):
    if wildcards.kind == "SNV":
        return expand("{model}/mutect_nobin/n_subclonal_norm.txt", model=MODELS_NOREP)
    else:
        return expand("{model}/mutect_nobin_indels/n_subclonal_norm.txt", model=MODELS_NOREP_TRUE)

rule tot_SNV_subclonal:
    output: "subclonal_{kind}"
    input: kind_subclonal
    shell:
        """
            cat {input} > {output}
        """

rule correlation_snv_subclonal:
    input: x='MR_edu_SNV_averaged.tsv', y='subclonal_SNV_averaged.tsv'
    output: 'MR_SNV_subclonal.pdf'
    params: tool=BIN_DIR+'/corrplot', toremove="CRC0282", palette=COLORS_MODELS_NOMSI
    shell:
        """
            {params.tool} {params.toremove} '{params.palette}' {input} {output} mean MR_SNV n_subclonal_norm no
        """

#### other bed files
rule bed_simplerepeat:
    input: SNAKE_ROOT+'/task/annotations/local/share/data/hg38_simpleRepeat.txt.gz'
    output: 'simpleRepeat.bed'
    shell: 
        """
            zcat {input} | cut -f 2,3,4 |sort -k1,1 -k2,2n |uniq | bedtools merge -i -  > {output}
        """

rule bed_repeatmask:
    input: SNAKE_ROOT+'/task/annotations/local/share/data/hg38_rmsk.txt.gz'
    output: 'rmsk.bed'
    shell: 
        """
            zcat {input} | cut -f 6,7,8 |sort -k1,1 -k2,2n |uniq | bedtools merge -i - > {output}
        """

# gain all merged then pcgr, to get a MAF
#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset$ for f in */*/vitro.merged.vcf.gz; do tabix $f; done
rule merge_all:
    input: expand("{model}/platypus_nobin_00/vitro.merged.vcf.gz", model=MODELS)
    output: "all_vitro_all_merged_gained.vcf.gz"
    shell:
        """
            bcftools merge -m none --missing-to-ref {input} | bgzip > {output}
            tabix {output}
        """

rule merge_all_mss:
    input: expand("{model}/platypus_nobin_00/vitro.merged.vcf.gz", model=MODELS[1:])
    output: "all_vitro_mss_merged_gained.vcf.gz"
    shell:
        """
            bcftools merge -m none --missing-to-ref {input} | bgzip > {output}
            tabix {output}
        """

rule bed_all:
    input: "all_vitro_{MSS}_merged_gained.vcf.gz"
    output: "all_vitro_{MSS}_merged_gained.bed"
    shell:
        """
            zcat {input} | grep -v "^#" | bawk '{{print $1,$2-1,$2,$3}}' > {output}
        """

PCGR='/mnt/trcanmed/snaketree/prj/snakegatk/local/src/pcgr/'
rule pcgr:
    input: "all_vitro_all_merged_gained.vcf.gz"
    output: "pcgr/all_gained.pcgr_acmg.grch38.snvs_indels.tiers.tsv"
    params: pcgr=PCGR, assay='WGS', mdir='pcgr'
    shell:
        """
            mkdir -p {params.mdir}
            python3 {params.pcgr}/pcgr.py --pcgr_dir {params.pcgr} \
            --output_dir {params.mdir} \
            --sample_id all_gained \
            --genome_assembly grch38 \
            --conf {params.pcgr}/examples/example_COAD.toml \
            --input_vcf {input} \
            --tumor_site 9 \
            --tumor_purity 1 \
            --include_trials \
            --assay {params.assay} \
            --estimate_msi_status \
            --estimate_tmb \
            --no_vcf_validate
        """

#
#--input-vcf WD4086.vcf --output-maf WD4086.maf 
#--inhibit-vep
#--ncbi-build  GRCh38
#--ref-fasta

#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset/pcgr$ perl ~/depth/mskcc-vcf2maf-754d68a/vcf2maf.pl --input-vcf all_gained.pcgr_acmg.grch38.pass.vcf --output-maf test.maf --inhibit-vep --ncbi-build GRCh38 --ref-fasta /mnt/trcanmed/snaketree/task/annotations/dataset/gnomad/GRCh38.d1.vd1.fa
#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset/pcgr$ grep "^#" all_gained.pcgr_acmg.grch38.pass.vcf > all.vcf
#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset/pcgr$ grep -v "^#" all_gained.pcgr_acmg.grch38.pass.vcf  | bawk '{print "chr"$0}'>> all.vcf
#egrassi@godot:/scratch/trcanmed/AF_spectra/dataset/pcgr$ perl ~/depth/mskcc-vcf2maf-754d68a/vcf2maf.pl --input-vcf all.vcf --output-maf test.maf --inhibit-vep --ncbi-build GRCh38 --ref-fasta /mnt/trcanmed/snaketree/task/annotations/dataset/gnomad/GRCh38.d1.vd1.fa


# sign input:
# 1- 24 samples, no 2nd round for technicalities right now, vitro-vivo together all children of a given t0 clone together
# 2- 15 samples, vitro-vivo separated, 2nd round included, 1 sample for each model (1 vivo 1 vitro)
# 3- 130 samples, but few muts, no 2nd round for technicalities now, each clone is 1 sample
#   
rule all_MR_ov:
    input: expand("{model}/platypus_nobin/all.MR_ov", model=MODELS)
    output: "all_MR_ov.tsv"
    shell:
        """
            cat {input} | head -n1 > {output} || 'echo ciao'
            cat {input} | grep -w -v start >> {output}
        """
        

### Evil spawn non syn
rule evil_muts:
    input: second_genes='CRC1502_clones_all/platypus_nobin_{altclass}/nonsyn.binary.tsv.gz', 
           first_genes='CRC1502/platypus_nobin_{altclass}/nonsyn.binary.tsv.gz', 
           second_muts='CRC1502_clones_all/platypus_nobin_{altclass}/CRC1502-09.annovar.gz', 
           first_muts='CRC1502/platypus_nobin_{altclass}/CRC1502-09.annovar.gz'
    params: target='CRC1502-09C', targetT1='CRC1502-09-1-C', nbrothers=3
    output: muts="CRC1502-09C_CRC1502-09C_CRC1502-09-1-C.{altclass}.private.tsv"
    script: SRC_DIR+'/wip_common_muts.R'

# regions
# annotatr
def all_gained_bed(wildcards):
    if wildcards.kind == "first":
        return expand("{model}/platypus_nobin_00/all.gain.bed", model=MODELS_NOREP_TRUE)
    elif wildcards.kind == "all":
        return expand("{model}/platypus_nobin_indels_00/all.gain.bed", model=MODELS)
    elif wildcards.kind == "bulk":
        return expand("{model}/tree/bulk.bed", model=MODELS_NOREP_TRUE)
    else: 
        print("boh!")

rule overall_bed:
    output: "gained_{kind}.bed"
    input: all_gained_bed
    shell:
        """
            cat {input} | cut -f 1,2,3 | sort | uniq > {output}
        """

rule annotatr:
    input: gained_bed="gained_{kind}.bed"
    params: custom_annot="no"
    output: plot_n="gained_{kind}.genomicregions.svg", plot_corr="gained_{kind}.genomicregionsnorm.svg"
    script: SRC_DIR+"/annotatr.R"

rule annotatr_bis:
    input: gained_bed="gained_first.bed", bulk_bed="gained_bulk.bed"
    params: custom_annot="no"
    output: outf="annotatr_locations.tsv"
    script: SRC_DIR+'/annotatr_two_vs.R'

# cleverers
rule cleverers_merge_exp:
    input: expand('cleverers/{model}/cosmic_exposures.tsv', model=['CRC2566','CRC2573','CRC2608'])
    output: "cleverers_exposures.tsv"
    shell: """
            head -n1 {input[0]} > {output}
            cat {input} | grep CRC >> {output} 
           """

rule cleverers_merge_cosine:
    input: expand('cleverers/{model}/cosmic_cosine.tsv', model=['CRC2566','CRC2573','CRC2608'])
    output: "cleverers_cosine.tsv"
    shell: """
            head -n1 {input[0]} > {output}
            cat {input} | grep CRC >> {output} 
           """

# lagomarsino subclonal all
rule all_thr_subcl:
    input: kind_MR
    output: "thr_{lowAF}-{highAF}_{kind}"
    shell:
        """
            cat {input} | grep -v '\-M' |  bawk '$3=={wildcards.highAF} && $4=={wildcards.lowAF} {{print $1,$2}}' | tr "." "\\t" | cut -f 1,6 > {output}
        """

rule subclonal_all_thr:
    input: subclonal="thr_{lowAF}-{highAF}_subclonal", MR='MR_edu_SNV',
           theme=GGTHEME, colors=MANY_COLORS_PALETTE
    output: plot='thr_{lowAF}-{highAF}_subclonal.png'
    log: log='thr_{lowAF}-{highAF}_subclonal.log'
    script: SRC_DIR+'/subclonal_all_lago.R'

def my_expand_thr(wildcards):
    exp = expand("thr_{lowAF}-{highAF}_subclonal.png", lowAF=[0.025, 0.05, 0.1, 0.12, 0.15], 
                                                       highAF=[0.05, 0.1, 0.15, 0.2, 0.24, 0.3, 0.5])
    res = []
    import re
    for e in exp:
        sl = e.split('_')
        sl = sl[1].split('-')
        laf = float(sl[0])
        haf = float(sl[1])
        if laf < haf:
            res.append(e)
    return res

rule all_subclonal_thr:
    input: my_expand_thr


### n clonal bulk vs clones T0
# both need VAF threshold
rule number_clonal:
    input: bulk="{model}/tree/bulk.tsv.gz", clone="{model}/mutect_nobin/all_T0_fbcalls.tsv.gz"
    output: "{model}_clonal_{thr}_SNVs.tsv.gz"
    shell: 
        """
	        zcat {input.clone} | sed 's/\.fbcalls\.tsv\.gz//1' | bawk '$3 > {wildcards.thr} {{print $1,$2":"$3":"$4}}' > {output}.tmp
            zcat {input.bulk} | tr ":" "\\t" | bawk '$10 > {wildcards.thr} {{print "bulk_{wildcards.model}",$3}}' >> {output}.tmp
            gzip -c {output}.tmp > {output}
            rm {output}.tmp
        """

rule all_number:
    input: expand("{model}_clonal_{{thr}}_SNVs.tsv.gz", model=MODELS_NOREP_TRUE)
    output: "all_clonal_{thr}_n.txt"
    shell:
        """
            zcat {input} | cut -f 1 | sort | uniq -c | tr -s " " "\\t" |  cut -f 2,3 > {output}
        """

# put together T1 SNV bulk and accumulated SNVs list and annotations for suppl table 2
# tree/bulkmutinfo.tsv.gz and platypus_nobin_00/mutinfo.tsv.gz
# TODO add to git remember!
rule all_anno_muts_T1:
    input: expand("edt_dir/{model}_edt2.tsv", model=MODELS_NOREP_TRUE)

rule tsv_anno_muts_T1:
    input: bulk="{model}/tree/bulkmutinfo.tsv.gz", acc="{model}/platypus_nobin_00/mutinfo.tsv.gz", essential=PRJ_ROOT+"/local/share/data/common_iorio_crisp_essential"
    output: outtsv="edt_dir/{model}_edt2.tsv"
    log: log="edt_dir/{model}_edt2.log"
    script: SRC_DIR+"/merge_mutinfo.R"

# put together T2 accumulated SNVs list and annotations (not CRC0327 in vivo) for suppl table 8
rule all_anno_muts_T2:
    input: expand("edt_dir/{model}_edt8.tsv", model=MODELS_T2) 

rule tsv_anno_muts_T2:
    input: acc="{model}/platypus_nobin_00/mutinfo.tsv.gz", essential=PRJ_ROOT+"/local/share/data/common_iorio_crisp_essential"
    output: outtsv="edt_dir/{model}_edt8.tsv"
    log: log="edt_dir/{model}_edt8.log"
    script:  SRC_DIR+"/merge_mutinfo_onlyclones.R" 

# suppl table 6 cleverers annotations
rule all_anno_muts_cleverers:
    input: expand("edt_dir/{model}_edt6.tsv", model=MODELS_CLEV) 

rule tsv_anno_muts_cleverers:
    input: acc="cleverers/{model}/mutinfo.tsv.gz", essential=PRJ_ROOT+"/local/share/data/common_iorio_crisp_essential"
    output: outtsv="edt_dir/{model}_edt6.tsv"
    log: log="edt_dir/{model}_edt6.log"
    script:  SRC_DIR+"/merge_mutinfo_onlyclones.R" 

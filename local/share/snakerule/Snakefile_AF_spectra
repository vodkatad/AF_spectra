include: "./conf.sk"

rule all_vcf:
    input: expand("{depth}.vcf.gz", depth=DEPTHS)

rule get_vcf:
    output: "{depth}.vcf.gz"
    params: url=BASEURL+"/SPP_GT_"+GT+"_{depth}.bwa."+CALLPIPE+".vcf.gz"
    shell:
        """
            wget {params.url} -O {output}
        """

rule af_table:
    input: "{depth}.vcf.gz"
    output: "{depth}.af.gz"
    params: nsamples="2"
    shell:
        """
            zcat {input} | grep -v "^##" | bawk '$7=="PASS" ||  /^#/' | perl -ane '@gt=splice(@F,9,{params.nsamples}); $gt=""; foreach $g (@gt) {{ if ($.==1) {{$gt.=$g."\\t";}} else {{ @afs = split(":",$g); if ($afs[2] eq ".") {{$afs[2]=0;}} $gt.=$afs[2]."\\t";}} }} chop($gt); print $F[0]."\\t".$F[1]."\\t".$F[3]."\\t".$F[4]."\\t".$gt."\\n";' | grep -v "," | gzip > {output}
        """


rule af_table_sSNV:
    output: "{depth}.af.snv.gz"
    input: "{depth}.af.gz"
    shell:
        """
            zcat {input} | sed 1d | bawk 'length($3)==1 && length($4)==1{{print $1"_"$2"_"$3"_"$4, $5}}' | gzip > {output}
        """

#rule af_table_sINDEL TBD

def lowerupper(wildcards, input):
    if wildcards.AF == '0.5':
        print("ma")
        return {'depths': DEPTHS, 'lower':0.25, 'upper':0.75 }
    elif wildcards.AF == '1':
        print("pp")
        return {'depths': DEPTHS, 'lower':0.75, 'upper':1 }
    else:
        return {'depths': DEPTHS, 'lower':0.25, 'upper':0.75 }
        

# histogram for all
rule histo:
    input: "{AF}_300X.selection.tsv", expand("{depth}.af.snv.gz", depth=DEPTHS)
    output: table="{AF}.stats.tsv", selected="{AF}_sel.pdf", all="{AF}_all.pdf"
    params: lowerupper
    script: SRC_DIR+"/hist.R"

def input(wildcards):
    if KIND == "SNV":
        return(wildcards.depth+".af.snv.gz")
    else:
        print("TBD")
        return(wildcards.depth+".af.indel.gz")

# rule that selects from 100x muts at 0.5 +- 0.05
rule selection:
    input: "{depth}.af.snv.gz"
    output: "{AF}_{depth}.selection.tsv"
    params: padding="0.05"
    shell:
        """
            zcat {input} | bawk '$2 < {wildcards.AF} + {params.padding} && $2 > {wildcards.AF} - {params.padding} {{print $1}}' > {output}
        """
# rule that forall says how many of selected we lose and their summary (min, max, mean, sd, quartiles)

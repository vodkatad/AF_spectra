include: "conf.sk"

VCFTOBED=BIN_DIR+"/vcf_to_bed_platypus_00"
rule all_tsv:
    input: expand("{sample}.tsv.gz", sample=SAMPLES)

# why decoy are in callable interval list?? let's start with chr1-22 only, sequenza is on 1-22-X-Y only right now
rule process_vcf:
    input: vcf=DATA+"/platypus_filtered.vcf.gz", chrs=PRJ_ROOT+"/local/share/data/chrs"
    output: "{sample}.tsv.gz"
    params: tool=VCFTOBED, multi=MULTI, kind=KIND, sample= lambda wildcards: SAMPLE if SAMPLE!="wildcards" else wildcards.sample
    log: "{sample}.multiallelic"
    shell:
        """
            bcftools view -s {params.sample} {input.vcf} | bcftools annotate -I +'%CHROM:%POS:%REF:%ALT' - \\
            | grep -v "^#" |  filter_1col 1 {input.chrs} | {params.tool} {params.kind} {params.multi} 2> {log} \\
            | tr "@" "\\t" | gzip > {output}
        """

#rule pair_ov:
#    input: t0="{t0sample}.calls.tsv.gz", t1="{t1sample}.calls.tsv.gz"#, ovbed="{t1sample}_{t0sample}.callable.bed.gz"
#    output: t0="{t0sample}_{t1sample}.callsov.tsv.gz", t1="{t1sample}_{t0sample}.callsov.tsv.gz"
#    shell:
#        """
#            bedtools intersect -a <(zcat {input.t0} | sed 1d | cut -f1 --complement) -b {input.ovbed} | bawk '{{print $4":"$5":"$6":"$7, $0}}' |  gzip > {output.t0}
#            bedtools intersect -a <(zcat {input.t1} | sed 1d | cut -f1 --complement) -b {input.ovbed} | bawk '{{print $4":"$5":"$6":"$7, $0}}' |  gzip > {output.t1}
#        """

rule pair_ov_nobcnok:
    input: expand("{sample}.tsv.gz", sample=SAMPLES)
    output: res="allvsall.ovcnokdelta.tsv.gz"
    script: SRC_DIR+'/find_common_private.R'

rule all_pairs: 
    input: expand("{t1sample}_{t0sample}.ovcnokdelta.tsv.gz", t1sample=SAMPLES[0], t0sample=SAMPLES[1])

rule upsetR:
    input: expand("{sample}.tsv.gz", sample=SAMPLES)
    output: "upsetr.svg"
    params: tool=BIN_DIR+"/upsetr"
    shell:
        """
            for f in {input}; do \\
                zcat $f | cut -f 4 | tr ":" "\\t" | bawk '{{print $1"_"$2"_"$3}}' | bawk -v N=$f '{{print $1,N}}' | sed 's/\.tsv\.gz//1'; \\
            done > {output}.tmp
            {params.tool} {output}.tmp {output}
            rm {output}.tmp
        """


rule class_vcf:
    input: ovcnok="allvsall.ovcnokdelta.tsv.gz", vcf=DATA+"/platypus_filtered.vcf.gz"
    output: "paired.{class}.vcf.gz"
    shell:
        """
            zcat {input.vcf} | grep "^##" > {output}.tmp
            zcat {input.vcf} | grep -v "^##" | grep "^#" | cut -f 11 --complement >> {output}.tmp
            zcat {input.ovcnok} | tr ":" "\\t" | bawk '$5=="{wildcards.class}" {{print $1,$2,$1":"$2"_"$3"/"$4,$3,$4,".","PASS","CONTQ=42","GT:AF","0/1:0.42"}}' >> {output}.tmp
            bgzip -c {output}.tmp > {output}
            rm {output}.tmp
        """ 

rule signature:
    input: "paired.{class}.vcf.gz"
    output: "{class}.cosmic.fit.tsv"
    params: tool=BIN_DIR+'/mut_pat_signatures_fit_one'
    shell: 
        """
            {params.tool} {input} {output} {wildcards.class}
        """

rule all_signatures:
    input: expand('{wclass}.cosmic.fit.tsv', wclass=['c' + str(x) for x in range(1, len(SAMPLES)+1)] + ['common'])
    output: 'all_cosmic_fit.tsv'
    run:    
        import pandas as pd
        res = pd.read_csv(input[0], sep="\t")
        for i in range(1,len(input)):
            resi = pd.read_csv(input[i], sep="\t")
            res = res.merge(resi, left_index=True, right_index=True)
        res.to_csv(output[0], sep="\t")


rule reformat_cosmic:
    input: "all_cosmic_fit.tsv"
    output: exposures="cosmic_exposures.tsv", cosine="cosmic_cosine.tsv"
    params: model=MODEL
    run:
        import pandas as pd
        d = pd.read_csv('all_cosmic_fit.tsv', sep= "\t", index_col=0)
        def append_model(name):
            if name == 'common':
                return params.model+'_shared'
            else:
                return params.model+'-'+name+'_private'
        d.rename(mapper=append_model, axis=1, inplace=True)
        d.rename(lambda x: x.replace('Signature.', ''), inplace=True)
        cos = d[d.index=="cos_sim"]
        exp = d[d.index!="cos_sim"]
        cos.T.to_csv(output.cosine, sep="\t")
        exp.T.to_csv(output.exposures, sep="\t")

## annovar annotation for suppl tables
#chr1    14159222        14159223        C-A
rule class_bed:
    input: "allvsall.ovcnokdelta.tsv.gz"
    output: "{who}.bed"
    shell:
        """
            zcat {input} | bawk '$2=="{wildcards.who}"' | tr ":" "\\t" | bawk '{{print $1,$2-1,$2,$3"-"$4}}' > {output}
        """

rule annovar:
    input: "{who}.bed", ANNOVAR
    output: "{who}.multianno.txt"
    log: "{who}.multianno.log"
    params: ver="hg38"
    shell:
        """
        sed 's/chr//1;' < {input[0]} | tr "-" "\\t" | bawk '{{if($5=="") {{$5="-"}} if ($4==""){{$4="-"}} b=$2+1; e=b+length($4)-1; print $1,b,e,$4,$5,$6}}' > {output}.tmp
        table_annovar.pl {output}.tmp {input[1]} --otherinfo -buildver {params.ver} -out merged -remove -protocol refGene,avsnp150,cosmic87_coding -operation g,f,f -nastring . -polish &> {log}
        rm {output}.tmp
        bawk '{{print "{wildcards.who}", $0}}' < merged.hg38_multianno.txt | sed 1d > {output}
        rm merged.hg38_multianno.txt
        """

# caution do not use -j, temp files will get overwritten
rule all_all_annovar:
    input: expand("{who}.multianno.txt", who=CS)
    output: "all.annovar.gz"
    shell: "cat {input} | gzip >  {output}"
    

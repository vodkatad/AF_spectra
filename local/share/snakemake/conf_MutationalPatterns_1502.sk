import os
def find_prj_root(path=os.getcwd()):
    if os.path.isfile(os.path.join(path,".PRJ_ROOT")):
        return path
    else:
        if path:
            return find_prj_root(os.path.dirname(path))
        else:
            raise Exception("Can not find the PRJ_ROOT directory")

PRJ_ROOT=find_prj_root()
BIN_DIR=PRJ_ROOT+"/local/bin"
BIOINFO_ROOT = os.getenv('BIOINFO_ROOT')
SNAKE_ROOT=os.getenv('SNAKE_ROOT')

VCF_DIR=PRJ_ROOT+"/dataset/CRC1502/platypus_nobin"
CALLABLE=PRJ_ROOT+"/local/share/data/CRC1502/callable_covered.bed.gz"

BED=PRJ_ROOT+"/local/share/data/mutational_patterns/data"


BULK=['']
# TODO FIXME
CLONE3=['CRC1502-03-0', 'CRC1502-03-1-A','CRC1502-03-1-C','CRC1502-03-1-D']
CLONE8=['CRC1502-08-0', 'CRC1502-08-1-A', 'CRC1502-08-1-C', 'CRC1502-08-1-D']
CLONE9=['CRC1502-09-0','CRC1502-09-1-A', 'CRC1502-09-1-E', 'CRC1502-09-1-C']
CLONE10=['CRC1502-10-0', 'CRC1502-10-MA-A', 'CRC1502-10-MA-D', 'CRC1502-10-MA-C', 'CRC1502-10-MC-A', 'CRC1502-10-MC-C', 'CRC1502-10-MC-D', 'CRC1502-10-MI-A', 'CRC1502-10-MI-C', 'CRC1502-10-MI-G', 'CRC1502-10-1-A', 'CRC1502-10-1-B', 'CRC1502-10-1-D']

CLONES=[CLONE3, CLONE8, CLONE9, CLONE10]
FUN_OV=find_pairs_raw_ov


SAMPLE =  "wildcards" #"^1740D" for biodiversa calls #"{wildcards.sample}" for mutect # "TUMOR" for varscan

WANTED_CN = "1,2,3"
# right now manually determined
NSIGN=4

wildcard_constraints:
    sample="[a-zA-Z0-9]+-[0-9]+-[A-Z0-9]+-?[A-Z0-9]?"   
wildcard_constraints:
    t1sample="[a-zA-Z0-9]+-[0-9]+-[A-Z0-9]+-?[A-Z0-9]?"
wildcard_constraints:
    t0sample="[a-zA-Z0-9]+-[0-9]+-[A-Z0-9]+-?[A-Z0-9]?"

SAMPLES_HIGH=["CRC1502-08","CRC1502-09"] # list comprehens TODO
SAMPLES_ZERO=[x+'-0' for x in SAMPLES_HIGH]

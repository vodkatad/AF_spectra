import os
def find_prj_root(path=os.getcwd()):
    if os.path.isfile(os.path.join(path,".PRJ_ROOT")):
        return path
    else:
        if path:
            return find_prj_root(os.path.dirname(path))
        else:
            raise Exception("Can not find the PRJ_ROOT directory")

PRJ_ROOT=find_prj_root()
BIOINFO_ROOT = os.getenv('BIOINFO_ROOT')
SNAKE_ROOT=os.getenv('SNAKE_ROOT')
ANNOVAR=SNAKE_ROOT+"/task/variant_annotations/dataset/annovar/hg38/humandb/"
HROOT='/home/egrassi'
BIN_DIR=PRJ_ROOT+"/local/bin"
SRC_DIR=PRJ_ROOT+"/local/src"

###################################################################
KIND="SNV" # | indel
MULTI="nomulti"
### sample variable portion #############################################
DATA=PRJ_ROOT+"/local/share/data/CRC2826PRO_clones"
SDATA=DATA
SAMPLES=["CRC2826PRO-03-0","CRC2826PRO-05-0","CRC2826PRO-09-0","CRC2826PRO-14-0","CRC2826PRO-03-1-A","CRC2826PRO-03-1-B","CRC2826PRO-05-1-B","CRC2826PRO-05-1-H","CRC2826PRO-05-1-K","CRC2826PRO-09-1-A","CRC2826PRO-09-1-E","CRC2826PRO-09-1-G","CRC2826PRO-14-1-B","CRC2826PRO-14-1-D","CRC2826PRO-14-1-G"]
import re
CLONE3=[x for x in SAMPLES if re.search('03', x)]
CLONE5=[x for x in SAMPLES if re.search('05', x)]
CLONE9=[x for x in SAMPLES if re.search('09', x)]
CLONE14=[x for x in SAMPLES if re.search('14', x)]
CLONES=[CLONE3,CLONE5,CLONE9, CLONE14]

SAMPLES_HIGH=["CRC2826PRO-03","CRC2826PRO-05","CRC2826PRO-09","CRC2826PRO-14"]
SAMPLES_ZERO=[x+'-0' for x in SAMPLES_HIGH]
VCF_DIR=PRJ_ROOT+"/dataset_IANG/CRC2826PRO/placeholder"
BULKNAME="CRC2826PRO-0-B"
SHIPMENT="IANG_bulk"
NORMAL="CRC2826NMH"
##############################################################

VCFTOBED=BIN_DIR+"/vcf_to_bed_platypus"
VCFTOBED1=BIN_DIR+"/vcf_to_bed"
CNLEN=BIN_DIR+"/cn_len_plot"
CNLEN2=BIN_DIR+"/cn_len_plot2"

DBSNP=BIOINFO_ROOT+"/task/annotations/dataset/gnomad/chr_All_20180418.vcf.bgz"
CALLABLE=DATA+"/callable_covered.bed.gz"

DNDSCV_RDA=DATA+"/../RefCDS_human_GRCh38.p12.rda"

ALL_SAMPLES=SAMPLES
SAMPLE =  "wildcards" #"^1740D" for biodiversa calls #"{wildcards.sample}" for mutect # "TUMOR" for varscan
WANTED_CN = "1,2,3"

wildcard_constraints:
    sample="[a-zA-Z0-9]+-[0-9]+-[A-Z0-9]+-?[A-Z0-9]?"   
wildcard_constraints:
    t1sample="[a-zA-Z0-9]+-[0-9]+-[A-Z0-9]+-?[A-Z0-9]?"
wildcard_constraints:
    t0sample="[a-zA-Z0-9]+-[0-9]+-[A-Z0-9]+-?[A-Z0-9]?"

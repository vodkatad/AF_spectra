import os
def find_prj_root(path=os.getcwd()):
    if os.path.isfile(os.path.join(path,".PRJ_ROOT")):
        return path
    else:
        if path:
            return find_prj_root(os.path.dirname(path))
        else:
            raise Exception("Can not find the PRJ_ROOT directory")

PRJ_ROOT=find_prj_root()
BIN_DIR=PRJ_ROOT+"/local/bin"
BIOINFO_ROOT = os.getenv('BIOINFO_ROOT')
SNAKE_ROOT=os.getenv('SNAKE_ROOT')

VCF_DIR=PRJ_ROOT+"/dataset/CRC1078/platypus_nobin"
CALLABLE=PRJ_ROOT+"/local/share/data/CRC1307_clones_mutect/callable_covered.bed.gz"

BED=PRJ_ROOT+"/local/share/data/mutational_patterns/data"

SAMPLES=['CRC1078-02-0', 'CRC1078-07-0', 'CRC1078-09-0','CRC1078-02-1-C', 'CRC1078-02-1-D', 'CRC1078-02-1-E', 'CRC1078-07-1-A', 'CRC1078-07-1-E', 'CRC1078-07-1-F', 'CRC1078-09-1-B', 'CRC1078-09-1-C', 'CRC1078-09-1-D']

BULK=['']
# TODO FIXME
CLONE2=['CRC1078-02-0', 'CRC1078-02-1-C', 'CRC1078-02-1-D', 'CRC1078-02-1-E']
CLONE8=['CRC1078-07-0', 'CRC1078-07-1-A', 'CRC1078-07-1-E', 'CRC1078-07-1-F']
CLONE9=['CRC1078-09-0', 'CRC1078-09-1-B', 'CRC1078-09-1-C', 'CRC1078-09-1-D']

ALL_SAMPLES=SAMPLES
SAMPLE =  "wildcards" #"^1740D" for biodiversa calls #"{wildcards.sample}" for mutect # "TUMOR" for varscan

WANTED_CN = "1,2,3"
# right now manually determined
NSIGN=4

wildcard_constraints:
    sample="[a-zA-Z0-9]+-[0-9]+-[A-Z0-9]+-?[A-Z0-9]?"   
wildcard_constraints:
    t1sample="[a-zA-Z0-9]+-[0-9]+-[A-Z0-9]+-?[A-Z0-9]?"
wildcard_constraints:
    t0sample="[a-zA-Z0-9]+-[0-9]+-[A-Z0-9]+-?[A-Z0-9]?"

SAMPLES_HIGH=["CRC1078-02","CRC1078-07","CRC1078-09"] # list comprehens TODO
SAMPLES_ZERO=[x+'-0' for x in SAMPLES_HIGH]
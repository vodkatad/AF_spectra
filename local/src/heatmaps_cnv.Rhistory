setwd('/mnt/trcanmed/snaketree/prj/AF_spectra/dataset/CRC1307_sequenza')
l <- list.files(path=".", pattern="*.tsv.gz")
l
d <- sapply(l, function(x) { y <- read.table(x, sep="\t", header=TRUE); return(y$V4)})
head(d)
x <- read.table(l[[1]], sep="\t", header=FALSE)
x
x$V4
d <- sapply(l, function(x) { y <- read.table(x, sep="\t", header=FALSE); return(y$V4)})
head(d)
cors <- cor.test(d)
cors <- cor(d)
head(cors)
library(corrplot)
corrplot(cors)
library(pheatmap)
pheatmap(d)
dim(d)
head(d)
alleq <- apply(d, 1, function(x) length(unique(x)==1))
table(alleq)
alleq <- apply(d, 1, function(x) length(unique(x))==1)
table(alleq)
deq <-d[alleq,]
pheatmap(deq)
deq <-d[!alleq,]
pheatmap(deq)
#alleq <- apply(d, 1, function(x) length(unique(x))==1)
dim(d)
cors <- cor(deq)
corrplot(cors)
three <- apply(d, 1, function(x) length(unique(x))==3)
table(trhee)
table(three)
#alleq <- apply(d, 1, function(x) length(unique(x))>=3)
morethre <- apply(d, 1, function(x) length(unique(x))>=3)
table(morethre)
morethre <- apply(d, 1, function(x) length(unique(x))>=4)
table(morethre)
deq <-d[morethre],]
deq <-d[morethre,]
pheatmap(deq)
pheatmap(deq, cluster_rows =FALSE)
head(deq)
sds <- apply(d, 1, sd)
head(sds)
plot(density(sds))
plot(density(sds), xlim=c(0,1))
ddd <- d[sds>0.2,]
pheatmap(ddd, cluster_rows =FALSE)
dim(ddd)
dim(deq)
ddd <- d[sds>0.4,]
dim(ddd)
ddd <- d[sds>0.8,]
dim(ddd)
pheatmap(ddd, cluster_rows =FALSE)
corrplot(cors)
std_err(rnorm(100))
sd(rnorm(100))/100
std <- function(x) sd(x)/sqrt(length(x))
stds <- apply(d, 1, std)
plot(density(stds))
ddd2 <- d[sds>3,]
ddd2 <- d[stds>3,]
dim(dd)
dim(ddd)
dim(ddd2)
head(ddd)
pheatmap(ddd, cluster_rows =FALSE, cluster_distance_cols=distance="correlation")
pheatmap(ddd, cluster_rows =FALSE, cluster_distance_cols="correlation")
corrplot(cor(d))
corrplot(cor(ddd))
pheatmap(ddd, cluster_rows =FALSE, cluster_cols=FALSE)
savehistory("/mnt/trcanmed/snaketree/prj/AF_spectra/local/src/heatmaps_cnv.Rhistory")

minv <- min(ddd)
maxv <- max(ddd)
halfv <- 3
neutral_value <- 3
if (halfv > minv && halfv < maxv) { 
    bk1 <- c(seq(minv-0.1,neutral_value-0.1,by=0.1),neutral_value-0.0999)
    bk2 <- c(neutral_value+0.001, seq(neutral_value+0.1,maxv+0.1,by=0.1))
    bk <- c(bk1, bk2)
    my_palette <- c("darkgreen", colorRampPalette(colors = c("darkblue", "lightblue"))(n = length(bk1)-1),
            "snow1", "snow1",
            c(colorRampPalette(colors = c("tomato1", "darkred"))(n = length(bk2)-1)))
            }
        
    
colnames(d) <- sapply(strsplit(colnames(ddd),'.',fixed=T), function(x) x[[1]][1])
colnames(ddd) <- sapply(strsplit(colnames(ddd),'.',fixed=T), function(x) x[[1]][1])        
pheatmap(ddd,  fontsize_row = 3, fontsize_col=10, show_colnames = TRUE, border_color=NA, border=FALSE, cluster_rows=FALSE, cluster_cols=TRUE, clustering_distance_cols="correlation", color = my_palette)


pvals  <- foreach(i =  1:length(colnames(d1))) %dopar% {
  wilcox.test(d2[,i], d3[,i], paired=FALSE)$p.value
}
result[,'pvalues'] <- unlist(pvals)

r <- foreach(i = 1:10) %dopar% {
i
}
Papply <- function(x,fun)
{
n <- choose(ncol(x), 2)
m <- nrow(x)
foo <- matrix(0,m,n)
k <- 1
i <- 1
while ( i < ncol(x))
{   
    j <- i
    while (j < ncol(x))
    {
        foo[,k] <- fun(x[,i],x[,j])
        k <- k + 1
        j <- j + 1
    }
    i <- i + 1
}
return(foo)
}

PPapply <- function(x,fun)
{
n <- ncol(x)

foo <- matrix(0,n,n)
for ( i in 1:n)
{
    for (j in 1:n)
    {
        foo[i,j] <- fun(x[,i],x[,j])
    }
}
return(foo)
}